// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_msg_2eproto();
namespace Msg {
class GetStateNodeRequest;
class GetStateNodeRequestDefaultTypeInternal;
extern GetStateNodeRequestDefaultTypeInternal _GetStateNodeRequest_default_instance_;
class GetStateNodeResponse;
class GetStateNodeResponseDefaultTypeInternal;
extern GetStateNodeResponseDefaultTypeInternal _GetStateNodeResponse_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class MasterNotifyCmdRequest;
class MasterNotifyCmdRequestDefaultTypeInternal;
extern MasterNotifyCmdRequestDefaultTypeInternal _MasterNotifyCmdRequest_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class UpdateStateHashRequest;
class UpdateStateHashRequestDefaultTypeInternal;
extern UpdateStateHashRequestDefaultTypeInternal _UpdateStateHashRequest_default_instance_;
class UpdateStatusRequest;
class UpdateStatusRequestDefaultTypeInternal;
extern UpdateStatusRequestDefaultTypeInternal _UpdateStatusRequest_default_instance_;
}  // namespace Msg
PROTOBUF_NAMESPACE_OPEN
template<> ::Msg::GetStateNodeRequest* Arena::CreateMaybeMessage<::Msg::GetStateNodeRequest>(Arena*);
template<> ::Msg::GetStateNodeResponse* Arena::CreateMaybeMessage<::Msg::GetStateNodeResponse>(Arena*);
template<> ::Msg::JoinRequest* Arena::CreateMaybeMessage<::Msg::JoinRequest>(Arena*);
template<> ::Msg::MasterNotifyCmdRequest* Arena::CreateMaybeMessage<::Msg::MasterNotifyCmdRequest>(Arena*);
template<> ::Msg::Message* Arena::CreateMaybeMessage<::Msg::Message>(Arena*);
template<> ::Msg::Request* Arena::CreateMaybeMessage<::Msg::Request>(Arena*);
template<> ::Msg::Response* Arena::CreateMaybeMessage<::Msg::Response>(Arena*);
template<> ::Msg::UpdateStateHashRequest* Arena::CreateMaybeMessage<::Msg::UpdateStateHashRequest>(Arena*);
template<> ::Msg::UpdateStatusRequest* Arena::CreateMaybeMessage<::Msg::UpdateStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Msg {

enum MsgType {
  Join_Request = 1,
  Join_Response = 2,
  UpdateStatus_Request = 3,
  UpdateStateHash_Request = 4,
  GetStateNode_Request = 5,
  GetStateNode_Response = 6,
  Common_Response = 7,
  MasterNotifyCmd_Request = 8
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = Join_Request;
constexpr MsgType MsgType_MAX = MasterNotifyCmd_Request;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
inline const std::string& MsgType_Name(MsgType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum FileCMDType {
  ADD_OP = 1,
  DEL_OP = 2,
  MOD_OP = 3,
  READ_OP = 4
};
bool FileCMDType_IsValid(int value);
constexpr FileCMDType FileCMDType_MIN = ADD_OP;
constexpr FileCMDType FileCMDType_MAX = READ_OP;
constexpr int FileCMDType_ARRAYSIZE = FileCMDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileCMDType_descriptor();
inline const std::string& FileCMDType_Name(FileCMDType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileCMDType_descriptor(), value);
}
inline bool FileCMDType_Parse(
    const std::string& name, FileCMDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileCMDType>(
    FileCMDType_descriptor(), name, value);
}
enum MsgResStatus {
  MSG_RES_OK = 1,
  MSG_RES_ERROR = 2
};
bool MsgResStatus_IsValid(int value);
constexpr MsgResStatus MsgResStatus_MIN = MSG_RES_OK;
constexpr MsgResStatus MsgResStatus_MAX = MSG_RES_ERROR;
constexpr int MsgResStatus_ARRAYSIZE = MsgResStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgResStatus_descriptor();
inline const std::string& MsgResStatus_Name(MsgResStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgResStatus_descriptor(), value);
}
inline bool MsgResStatus_Parse(
    const std::string& name, MsgResStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgResStatus>(
    MsgResStatus_descriptor(), name, value);
}
// ===================================================================

class JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.JoinRequest) */ {
 public:
  JoinRequest();
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JoinRequest* other);
  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(nullptr);
  }

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.JoinRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // @@protoc_insertion_point(class_scope:Msg.JoinRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class UpdateStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.UpdateStatusRequest) */ {
 public:
  UpdateStatusRequest();
  virtual ~UpdateStatusRequest();

  UpdateStatusRequest(const UpdateStatusRequest& from);
  UpdateStatusRequest(UpdateStatusRequest&& from) noexcept
    : UpdateStatusRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStatusRequest& operator=(const UpdateStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStatusRequest& operator=(UpdateStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStatusRequest*>(
               &_UpdateStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UpdateStatusRequest* other);
  friend void swap(UpdateStatusRequest& a, UpdateStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateStatusRequest* New() const final {
    return CreateMaybeMessage<UpdateStatusRequest>(nullptr);
  }

  UpdateStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStatusRequest& from);
  void MergeFrom(const UpdateStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.UpdateStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int32 status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.UpdateStatusRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class UpdateStateHashRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.UpdateStateHashRequest) */ {
 public:
  UpdateStateHashRequest();
  virtual ~UpdateStateHashRequest();

  UpdateStateHashRequest(const UpdateStateHashRequest& from);
  UpdateStateHashRequest(UpdateStateHashRequest&& from) noexcept
    : UpdateStateHashRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStateHashRequest& operator=(const UpdateStateHashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStateHashRequest& operator=(UpdateStateHashRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateStateHashRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStateHashRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStateHashRequest*>(
               &_UpdateStateHashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UpdateStateHashRequest* other);
  friend void swap(UpdateStateHashRequest& a, UpdateStateHashRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateStateHashRequest* New() const final {
    return CreateMaybeMessage<UpdateStateHashRequest>(nullptr);
  }

  UpdateStateHashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStateHashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStateHashRequest& from);
  void MergeFrom(const UpdateStateHashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStateHashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.UpdateStateHashRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // @@protoc_insertion_point(class_scope:Msg.UpdateStateHashRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetStateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetStateNodeRequest) */ {
 public:
  GetStateNodeRequest();
  virtual ~GetStateNodeRequest();

  GetStateNodeRequest(const GetStateNodeRequest& from);
  GetStateNodeRequest(GetStateNodeRequest&& from) noexcept
    : GetStateNodeRequest() {
    *this = ::std::move(from);
  }

  inline GetStateNodeRequest& operator=(const GetStateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateNodeRequest& operator=(GetStateNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateNodeRequest*>(
               &_GetStateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetStateNodeRequest* other);
  friend void swap(GetStateNodeRequest& a, GetStateNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateNodeRequest* New() const final {
    return CreateMaybeMessage<GetStateNodeRequest>(nullptr);
  }

  GetStateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateNodeRequest& from);
  void MergeFrom(const GetStateNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetStateNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:Msg.GetStateNodeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetStateNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetStateNodeResponse) */ {
 public:
  GetStateNodeResponse();
  virtual ~GetStateNodeResponse();

  GetStateNodeResponse(const GetStateNodeResponse& from);
  GetStateNodeResponse(GetStateNodeResponse&& from) noexcept
    : GetStateNodeResponse() {
    *this = ::std::move(from);
  }

  inline GetStateNodeResponse& operator=(const GetStateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateNodeResponse& operator=(GetStateNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateNodeResponse*>(
               &_GetStateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetStateNodeResponse* other);
  friend void swap(GetStateNodeResponse& a, GetStateNodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateNodeResponse* New() const final {
    return CreateMaybeMessage<GetStateNodeResponse>(nullptr);
  }

  GetStateNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateNodeResponse& from);
  void MergeFrom(const GetStateNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetStateNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // optional string hash = 3;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // @@protoc_insertion_point(class_scope:Msg.GetStateNodeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MasterNotifyCmdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.MasterNotifyCmdRequest) */ {
 public:
  MasterNotifyCmdRequest();
  virtual ~MasterNotifyCmdRequest();

  MasterNotifyCmdRequest(const MasterNotifyCmdRequest& from);
  MasterNotifyCmdRequest(MasterNotifyCmdRequest&& from) noexcept
    : MasterNotifyCmdRequest() {
    *this = ::std::move(from);
  }

  inline MasterNotifyCmdRequest& operator=(const MasterNotifyCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterNotifyCmdRequest& operator=(MasterNotifyCmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MasterNotifyCmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterNotifyCmdRequest* internal_default_instance() {
    return reinterpret_cast<const MasterNotifyCmdRequest*>(
               &_MasterNotifyCmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MasterNotifyCmdRequest* other);
  friend void swap(MasterNotifyCmdRequest& a, MasterNotifyCmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterNotifyCmdRequest* New() const final {
    return CreateMaybeMessage<MasterNotifyCmdRequest>(nullptr);
  }

  MasterNotifyCmdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterNotifyCmdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterNotifyCmdRequest& from);
  void MergeFrom(const MasterNotifyCmdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterNotifyCmdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.MasterNotifyCmdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_path = 2;
  bool has_file_path() const;
  void clear_file_path();
  static const int kFilePathFieldNumber = 2;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // required string hash = 3;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // required .Msg.FileCMDType operation = 1;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::Msg::FileCMDType operation() const;
  void set_operation(::Msg::FileCMDType value);

  // @@protoc_insertion_point(class_scope:Msg.MasterNotifyCmdRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int operation_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Msg.JoinRequest join = 1;
  bool has_join() const;
  void clear_join();
  static const int kJoinFieldNumber = 1;
  const ::Msg::JoinRequest& join() const;
  ::Msg::JoinRequest* release_join();
  ::Msg::JoinRequest* mutable_join();
  void set_allocated_join(::Msg::JoinRequest* join);

  // optional .Msg.UpdateStatusRequest update_status = 2;
  bool has_update_status() const;
  void clear_update_status();
  static const int kUpdateStatusFieldNumber = 2;
  const ::Msg::UpdateStatusRequest& update_status() const;
  ::Msg::UpdateStatusRequest* release_update_status();
  ::Msg::UpdateStatusRequest* mutable_update_status();
  void set_allocated_update_status(::Msg::UpdateStatusRequest* update_status);

  // optional .Msg.GetStateNodeRequest get_state_node = 3;
  bool has_get_state_node() const;
  void clear_get_state_node();
  static const int kGetStateNodeFieldNumber = 3;
  const ::Msg::GetStateNodeRequest& get_state_node() const;
  ::Msg::GetStateNodeRequest* release_get_state_node();
  ::Msg::GetStateNodeRequest* mutable_get_state_node();
  void set_allocated_get_state_node(::Msg::GetStateNodeRequest* get_state_node);

  // optional .Msg.UpdateStateHashRequest state_hash = 4;
  bool has_state_hash() const;
  void clear_state_hash();
  static const int kStateHashFieldNumber = 4;
  const ::Msg::UpdateStateHashRequest& state_hash() const;
  ::Msg::UpdateStateHashRequest* release_state_hash();
  ::Msg::UpdateStateHashRequest* mutable_state_hash();
  void set_allocated_state_hash(::Msg::UpdateStateHashRequest* state_hash);

  // @@protoc_insertion_point(class_scope:Msg.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Msg::JoinRequest* join_;
  ::Msg::UpdateStatusRequest* update_status_;
  ::Msg::GetStateNodeRequest* get_state_node_;
  ::Msg::UpdateStateHashRequest* state_hash_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // optional .Msg.GetStateNodeResponse state_node = 3;
  bool has_state_node() const;
  void clear_state_node();
  static const int kStateNodeFieldNumber = 3;
  const ::Msg::GetStateNodeResponse& state_node() const;
  ::Msg::GetStateNodeResponse* release_state_node();
  ::Msg::GetStateNodeResponse* mutable_state_node();
  void set_allocated_state_node(::Msg::GetStateNodeResponse* state_node);

  // required bool status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Msg.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::Msg::GetStateNodeResponse* state_node_;
  bool status_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Msg.Request request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::Msg::Request& request() const;
  ::Msg::Request* release_request();
  ::Msg::Request* mutable_request();
  void set_allocated_request(::Msg::Request* request);

  // optional .Msg.Response response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::Msg::Response& response() const;
  ::Msg::Response* release_response();
  ::Msg::Response* mutable_response();
  void set_allocated_response(::Msg::Response* response);

  // required .Msg.MsgType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Msg::MsgType type() const;
  void set_type(::Msg::MsgType value);

  // @@protoc_insertion_point(class_scope:Msg.Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Msg::Request* request_;
  ::Msg::Response* response_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinRequest

// required string name = 1;
inline bool JoinRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.name)
  return name_.GetNoArena();
}
inline void JoinRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.name)
}
inline std::string* JoinRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.name)
}

// required string ip = 2;
inline bool JoinRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinRequest::ip() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.ip)
  return ip_.GetNoArena();
}
inline void JoinRequest::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.ip)
}
inline std::string* JoinRequest::mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.ip)
}

// -------------------------------------------------------------------

// UpdateStatusRequest

// required string name = 1;
inline bool UpdateStatusRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStatusRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateStatusRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStatusRequest.name)
  return name_.GetNoArena();
}
inline void UpdateStatusRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStatusRequest.name)
}
inline std::string* UpdateStatusRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStatusRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStatusRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStatusRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStatusRequest.name)
}

// required int32 status = 2;
inline bool UpdateStatusRequest::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStatusRequest::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStatusRequest.status)
  return status_;
}
inline void UpdateStatusRequest::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Msg.UpdateStatusRequest.status)
}

// -------------------------------------------------------------------

// UpdateStateHashRequest

// required string name = 1;
inline bool UpdateStateHashRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStateHashRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateStateHashRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStateHashRequest.name)
  return name_.GetNoArena();
}
inline void UpdateStateHashRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStateHashRequest.name)
}
inline std::string* UpdateStateHashRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStateHashRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStateHashRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStateHashRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStateHashRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStateHashRequest.name)
}

// required string hash = 2;
inline bool UpdateStateHashRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStateHashRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateStateHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStateHashRequest.hash)
  return hash_.GetNoArena();
}
inline void UpdateStateHashRequest::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStateHashRequest.hash)
}
inline std::string* UpdateStateHashRequest::mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStateHashRequest.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStateHashRequest::release_hash() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStateHashRequest.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStateHashRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStateHashRequest.hash)
}

// -------------------------------------------------------------------

// GetStateNodeRequest

// required string name = 1;
inline bool GetStateNodeRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStateNodeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStateNodeRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateNodeRequest.name)
  return name_.GetNoArena();
}
inline void GetStateNodeRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateNodeRequest.name)
}
inline void GetStateNodeRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateNodeRequest.name)
}
inline void GetStateNodeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateNodeRequest.name)
}
inline void GetStateNodeRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateNodeRequest.name)
}
inline std::string* GetStateNodeRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateNodeRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateNodeRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.GetStateNodeRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateNodeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateNodeRequest.name)
}

// -------------------------------------------------------------------

// GetStateNodeResponse

// optional string name = 1;
inline bool GetStateNodeResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStateNodeResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStateNodeResponse::name() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateNodeResponse.name)
  return name_.GetNoArena();
}
inline void GetStateNodeResponse::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateNodeResponse.name)
}
inline void GetStateNodeResponse::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateNodeResponse.name)
}
inline void GetStateNodeResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateNodeResponse.name)
}
inline void GetStateNodeResponse::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateNodeResponse.name)
}
inline std::string* GetStateNodeResponse::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateNodeResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateNodeResponse::release_name() {
  // @@protoc_insertion_point(field_release:Msg.GetStateNodeResponse.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateNodeResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateNodeResponse.name)
}

// optional string ip = 2;
inline bool GetStateNodeResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetStateNodeResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetStateNodeResponse::ip() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateNodeResponse.ip)
  return ip_.GetNoArena();
}
inline void GetStateNodeResponse::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateNodeResponse.ip)
}
inline void GetStateNodeResponse::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateNodeResponse.ip)
}
inline void GetStateNodeResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateNodeResponse.ip)
}
inline void GetStateNodeResponse::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateNodeResponse.ip)
}
inline std::string* GetStateNodeResponse::mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateNodeResponse.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateNodeResponse::release_ip() {
  // @@protoc_insertion_point(field_release:Msg.GetStateNodeResponse.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateNodeResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateNodeResponse.ip)
}

// optional string hash = 3;
inline bool GetStateNodeResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetStateNodeResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetStateNodeResponse::hash() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateNodeResponse.hash)
  return hash_.GetNoArena();
}
inline void GetStateNodeResponse::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateNodeResponse.hash)
}
inline void GetStateNodeResponse::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateNodeResponse.hash)
}
inline void GetStateNodeResponse::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateNodeResponse.hash)
}
inline void GetStateNodeResponse::set_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateNodeResponse.hash)
}
inline std::string* GetStateNodeResponse::mutable_hash() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateNodeResponse.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateNodeResponse::release_hash() {
  // @@protoc_insertion_point(field_release:Msg.GetStateNodeResponse.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateNodeResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateNodeResponse.hash)
}

// -------------------------------------------------------------------

// MasterNotifyCmdRequest

// required .Msg.FileCMDType operation = 1;
inline bool MasterNotifyCmdRequest::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterNotifyCmdRequest::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Msg::FileCMDType MasterNotifyCmdRequest::operation() const {
  // @@protoc_insertion_point(field_get:Msg.MasterNotifyCmdRequest.operation)
  return static_cast< ::Msg::FileCMDType >(operation_);
}
inline void MasterNotifyCmdRequest::set_operation(::Msg::FileCMDType value) {
  assert(::Msg::FileCMDType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  operation_ = value;
  // @@protoc_insertion_point(field_set:Msg.MasterNotifyCmdRequest.operation)
}

// required string file_path = 2;
inline bool MasterNotifyCmdRequest::has_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterNotifyCmdRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MasterNotifyCmdRequest::file_path() const {
  // @@protoc_insertion_point(field_get:Msg.MasterNotifyCmdRequest.file_path)
  return file_path_.GetNoArena();
}
inline void MasterNotifyCmdRequest::set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.MasterNotifyCmdRequest.file_path)
}
inline void MasterNotifyCmdRequest::set_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.MasterNotifyCmdRequest.file_path)
}
inline void MasterNotifyCmdRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.MasterNotifyCmdRequest.file_path)
}
inline void MasterNotifyCmdRequest::set_file_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.MasterNotifyCmdRequest.file_path)
}
inline std::string* MasterNotifyCmdRequest::mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.MasterNotifyCmdRequest.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MasterNotifyCmdRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:Msg.MasterNotifyCmdRequest.file_path)
  if (!has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MasterNotifyCmdRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:Msg.MasterNotifyCmdRequest.file_path)
}

// required string hash = 3;
inline bool MasterNotifyCmdRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterNotifyCmdRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MasterNotifyCmdRequest::hash() const {
  // @@protoc_insertion_point(field_get:Msg.MasterNotifyCmdRequest.hash)
  return hash_.GetNoArena();
}
inline void MasterNotifyCmdRequest::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.MasterNotifyCmdRequest.hash)
}
inline void MasterNotifyCmdRequest::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.MasterNotifyCmdRequest.hash)
}
inline void MasterNotifyCmdRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.MasterNotifyCmdRequest.hash)
}
inline void MasterNotifyCmdRequest::set_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.MasterNotifyCmdRequest.hash)
}
inline std::string* MasterNotifyCmdRequest::mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.MasterNotifyCmdRequest.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MasterNotifyCmdRequest::release_hash() {
  // @@protoc_insertion_point(field_release:Msg.MasterNotifyCmdRequest.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MasterNotifyCmdRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.MasterNotifyCmdRequest.hash)
}

// -------------------------------------------------------------------

// Request

// optional .Msg.JoinRequest join = 1;
inline bool Request::has_join() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_join() {
  if (join_ != nullptr) join_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Msg::JoinRequest& Request::join() const {
  const ::Msg::JoinRequest* p = join_;
  // @@protoc_insertion_point(field_get:Msg.Request.join)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::JoinRequest*>(
      &::Msg::_JoinRequest_default_instance_);
}
inline ::Msg::JoinRequest* Request::release_join() {
  // @@protoc_insertion_point(field_release:Msg.Request.join)
  _has_bits_[0] &= ~0x00000001u;
  ::Msg::JoinRequest* temp = join_;
  join_ = nullptr;
  return temp;
}
inline ::Msg::JoinRequest* Request::mutable_join() {
  _has_bits_[0] |= 0x00000001u;
  if (join_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::JoinRequest>(GetArenaNoVirtual());
    join_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.join)
  return join_;
}
inline void Request::set_allocated_join(::Msg::JoinRequest* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete join_;
  }
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  join_ = join;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.join)
}

// optional .Msg.UpdateStatusRequest update_status = 2;
inline bool Request::has_update_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_update_status() {
  if (update_status_ != nullptr) update_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::UpdateStatusRequest& Request::update_status() const {
  const ::Msg::UpdateStatusRequest* p = update_status_;
  // @@protoc_insertion_point(field_get:Msg.Request.update_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::UpdateStatusRequest*>(
      &::Msg::_UpdateStatusRequest_default_instance_);
}
inline ::Msg::UpdateStatusRequest* Request::release_update_status() {
  // @@protoc_insertion_point(field_release:Msg.Request.update_status)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::UpdateStatusRequest* temp = update_status_;
  update_status_ = nullptr;
  return temp;
}
inline ::Msg::UpdateStatusRequest* Request::mutable_update_status() {
  _has_bits_[0] |= 0x00000002u;
  if (update_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::UpdateStatusRequest>(GetArenaNoVirtual());
    update_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.update_status)
  return update_status_;
}
inline void Request::set_allocated_update_status(::Msg::UpdateStatusRequest* update_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_status_;
  }
  if (update_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_status_ = update_status;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.update_status)
}

// optional .Msg.GetStateNodeRequest get_state_node = 3;
inline bool Request::has_get_state_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::clear_get_state_node() {
  if (get_state_node_ != nullptr) get_state_node_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Msg::GetStateNodeRequest& Request::get_state_node() const {
  const ::Msg::GetStateNodeRequest* p = get_state_node_;
  // @@protoc_insertion_point(field_get:Msg.Request.get_state_node)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetStateNodeRequest*>(
      &::Msg::_GetStateNodeRequest_default_instance_);
}
inline ::Msg::GetStateNodeRequest* Request::release_get_state_node() {
  // @@protoc_insertion_point(field_release:Msg.Request.get_state_node)
  _has_bits_[0] &= ~0x00000004u;
  ::Msg::GetStateNodeRequest* temp = get_state_node_;
  get_state_node_ = nullptr;
  return temp;
}
inline ::Msg::GetStateNodeRequest* Request::mutable_get_state_node() {
  _has_bits_[0] |= 0x00000004u;
  if (get_state_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetStateNodeRequest>(GetArenaNoVirtual());
    get_state_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.get_state_node)
  return get_state_node_;
}
inline void Request::set_allocated_get_state_node(::Msg::GetStateNodeRequest* get_state_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_state_node_;
  }
  if (get_state_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_state_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_state_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  get_state_node_ = get_state_node;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.get_state_node)
}

// optional .Msg.UpdateStateHashRequest state_hash = 4;
inline bool Request::has_state_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::clear_state_hash() {
  if (state_hash_ != nullptr) state_hash_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Msg::UpdateStateHashRequest& Request::state_hash() const {
  const ::Msg::UpdateStateHashRequest* p = state_hash_;
  // @@protoc_insertion_point(field_get:Msg.Request.state_hash)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::UpdateStateHashRequest*>(
      &::Msg::_UpdateStateHashRequest_default_instance_);
}
inline ::Msg::UpdateStateHashRequest* Request::release_state_hash() {
  // @@protoc_insertion_point(field_release:Msg.Request.state_hash)
  _has_bits_[0] &= ~0x00000008u;
  ::Msg::UpdateStateHashRequest* temp = state_hash_;
  state_hash_ = nullptr;
  return temp;
}
inline ::Msg::UpdateStateHashRequest* Request::mutable_state_hash() {
  _has_bits_[0] |= 0x00000008u;
  if (state_hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::UpdateStateHashRequest>(GetArenaNoVirtual());
    state_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.state_hash)
  return state_hash_;
}
inline void Request::set_allocated_state_hash(::Msg::UpdateStateHashRequest* state_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_hash_;
  }
  if (state_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_hash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  state_hash_ = state_hash;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.state_hash)
}

// -------------------------------------------------------------------

// Response

// required bool status = 1;
inline bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::clear_status() {
  status_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Response::status() const {
  // @@protoc_insertion_point(field_get:Msg.Response.status)
  return status_;
}
inline void Response::set_status(bool value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Msg.Response.status)
}

// optional string info = 2;
inline bool Response::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::info() const {
  // @@protoc_insertion_point(field_get:Msg.Response.info)
  return info_.GetNoArena();
}
inline void Response::set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.Response.info)
}
inline void Response::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.Response.info)
}
inline void Response::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.Response.info)
}
inline void Response::set_info(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.Response.info)
}
inline std::string* Response::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.Response.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_info() {
  // @@protoc_insertion_point(field_release:Msg.Response.info)
  if (!has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.info)
}

// optional .Msg.GetStateNodeResponse state_node = 3;
inline bool Response::has_state_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::clear_state_node() {
  if (state_node_ != nullptr) state_node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::GetStateNodeResponse& Response::state_node() const {
  const ::Msg::GetStateNodeResponse* p = state_node_;
  // @@protoc_insertion_point(field_get:Msg.Response.state_node)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetStateNodeResponse*>(
      &::Msg::_GetStateNodeResponse_default_instance_);
}
inline ::Msg::GetStateNodeResponse* Response::release_state_node() {
  // @@protoc_insertion_point(field_release:Msg.Response.state_node)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::GetStateNodeResponse* temp = state_node_;
  state_node_ = nullptr;
  return temp;
}
inline ::Msg::GetStateNodeResponse* Response::mutable_state_node() {
  _has_bits_[0] |= 0x00000002u;
  if (state_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetStateNodeResponse>(GetArenaNoVirtual());
    state_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.state_node)
  return state_node_;
}
inline void Response::set_allocated_state_node(::Msg::GetStateNodeResponse* state_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_node_;
  }
  if (state_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_node_ = state_node;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.state_node)
}

// -------------------------------------------------------------------

// Message

// required .Msg.MsgType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Msg::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:Msg.Message.type)
  return static_cast< ::Msg::MsgType >(type_);
}
inline void Message::set_type(::Msg::MsgType value) {
  assert(::Msg::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.Message.type)
}

// optional .Msg.Request request = 2;
inline bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Msg::Request& Message::request() const {
  const ::Msg::Request* p = request_;
  // @@protoc_insertion_point(field_get:Msg.Message.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::Request*>(
      &::Msg::_Request_default_instance_);
}
inline ::Msg::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:Msg.Message.request)
  _has_bits_[0] &= ~0x00000001u;
  ::Msg::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::Msg::Request* Message::mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::Request>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Message.request)
  return request_;
}
inline void Message::set_allocated_request(::Msg::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:Msg.Message.request)
}

// optional .Msg.Response response = 3;
inline bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::clear_response() {
  if (response_ != nullptr) response_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::Response& Message::response() const {
  const ::Msg::Response* p = response_;
  // @@protoc_insertion_point(field_get:Msg.Message.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::Response*>(
      &::Msg::_Response_default_instance_);
}
inline ::Msg::Response* Message::release_response() {
  // @@protoc_insertion_point(field_release:Msg.Message.response)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Msg::Response* Message::mutable_response() {
  _has_bits_[0] |= 0x00000002u;
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Message.response)
  return response_;
}
inline void Message::set_allocated_response(::Msg::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Msg.Message.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Msg::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::MsgType>() {
  return ::Msg::MsgType_descriptor();
}
template <> struct is_proto_enum< ::Msg::FileCMDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::FileCMDType>() {
  return ::Msg::FileCMDType_descriptor();
}
template <> struct is_proto_enum< ::Msg::MsgResStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::MsgResStatus>() {
  return ::Msg::MsgResStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
