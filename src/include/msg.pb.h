// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_msg_2eproto();
namespace Msg {
class CpFileRequest;
class CpFileRequestDefaultTypeInternal;
extern CpFileRequestDefaultTypeInternal _CpFileRequest_default_instance_;
class EndFilePostRequest;
class EndFilePostRequestDefaultTypeInternal;
extern EndFilePostRequestDefaultTypeInternal _EndFilePostRequest_default_instance_;
class EndFilePostResponse;
class EndFilePostResponseDefaultTypeInternal;
extern EndFilePostResponseDefaultTypeInternal _EndFilePostResponse_default_instance_;
class FileAttribute;
class FileAttributeDefaultTypeInternal;
extern FileAttributeDefaultTypeInternal _FileAttribute_default_instance_;
class FileOp;
class FileOpDefaultTypeInternal;
extern FileOpDefaultTypeInternal _FileOp_default_instance_;
class FileOperation;
class FileOperationDefaultTypeInternal;
extern FileOperationDefaultTypeInternal _FileOperation_default_instance_;
class FilePost;
class FilePostDefaultTypeInternal;
extern FilePostDefaultTypeInternal _FilePost_default_instance_;
class GetFileChunkRequest;
class GetFileChunkRequestDefaultTypeInternal;
extern GetFileChunkRequestDefaultTypeInternal _GetFileChunkRequest_default_instance_;
class GetFileChunkResponse;
class GetFileChunkResponseDefaultTypeInternal;
extern GetFileChunkResponseDefaultTypeInternal _GetFileChunkResponse_default_instance_;
class GetFileOpsRequest;
class GetFileOpsRequestDefaultTypeInternal;
extern GetFileOpsRequestDefaultTypeInternal _GetFileOpsRequest_default_instance_;
class GetFileOpsResponse;
class GetFileOpsResponseDefaultTypeInternal;
extern GetFileOpsResponseDefaultTypeInternal _GetFileOpsResponse_default_instance_;
class GetFileRequest;
class GetFileRequestDefaultTypeInternal;
extern GetFileRequestDefaultTypeInternal _GetFileRequest_default_instance_;
class GetFileResponse;
class GetFileResponseDefaultTypeInternal;
extern GetFileResponseDefaultTypeInternal _GetFileResponse_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateResponse;
class GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class JoinRequest;
class JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class JoinResponse;
class JoinResponseDefaultTypeInternal;
extern JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;
class LsFileRequest;
class LsFileRequestDefaultTypeInternal;
extern LsFileRequestDefaultTypeInternal _LsFileRequest_default_instance_;
class LsFileResponse;
class LsFileResponseDefaultTypeInternal;
extern LsFileResponseDefaultTypeInternal _LsFileResponse_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MvFileRequest;
class MvFileRequestDefaultTypeInternal;
extern MvFileRequestDefaultTypeInternal _MvFileRequest_default_instance_;
class NewFileRequest;
class NewFileRequestDefaultTypeInternal;
extern NewFileRequestDefaultTypeInternal _NewFileRequest_default_instance_;
class NewFileResponse;
class NewFileResponseDefaultTypeInternal;
extern NewFileResponseDefaultTypeInternal _NewFileResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RmFileRequest;
class RmFileRequestDefaultTypeInternal;
extern RmFileRequestDefaultTypeInternal _RmFileRequest_default_instance_;
class UpdateStateHashRequest;
class UpdateStateHashRequestDefaultTypeInternal;
extern UpdateStateHashRequestDefaultTypeInternal _UpdateStateHashRequest_default_instance_;
class UpdateStatusRequest;
class UpdateStatusRequestDefaultTypeInternal;
extern UpdateStatusRequestDefaultTypeInternal _UpdateStatusRequest_default_instance_;
}  // namespace Msg
PROTOBUF_NAMESPACE_OPEN
template<> ::Msg::CpFileRequest* Arena::CreateMaybeMessage<::Msg::CpFileRequest>(Arena*);
template<> ::Msg::EndFilePostRequest* Arena::CreateMaybeMessage<::Msg::EndFilePostRequest>(Arena*);
template<> ::Msg::EndFilePostResponse* Arena::CreateMaybeMessage<::Msg::EndFilePostResponse>(Arena*);
template<> ::Msg::FileAttribute* Arena::CreateMaybeMessage<::Msg::FileAttribute>(Arena*);
template<> ::Msg::FileOp* Arena::CreateMaybeMessage<::Msg::FileOp>(Arena*);
template<> ::Msg::FileOperation* Arena::CreateMaybeMessage<::Msg::FileOperation>(Arena*);
template<> ::Msg::FilePost* Arena::CreateMaybeMessage<::Msg::FilePost>(Arena*);
template<> ::Msg::GetFileChunkRequest* Arena::CreateMaybeMessage<::Msg::GetFileChunkRequest>(Arena*);
template<> ::Msg::GetFileChunkResponse* Arena::CreateMaybeMessage<::Msg::GetFileChunkResponse>(Arena*);
template<> ::Msg::GetFileOpsRequest* Arena::CreateMaybeMessage<::Msg::GetFileOpsRequest>(Arena*);
template<> ::Msg::GetFileOpsResponse* Arena::CreateMaybeMessage<::Msg::GetFileOpsResponse>(Arena*);
template<> ::Msg::GetFileRequest* Arena::CreateMaybeMessage<::Msg::GetFileRequest>(Arena*);
template<> ::Msg::GetFileResponse* Arena::CreateMaybeMessage<::Msg::GetFileResponse>(Arena*);
template<> ::Msg::GetStateRequest* Arena::CreateMaybeMessage<::Msg::GetStateRequest>(Arena*);
template<> ::Msg::GetStateResponse* Arena::CreateMaybeMessage<::Msg::GetStateResponse>(Arena*);
template<> ::Msg::JoinRequest* Arena::CreateMaybeMessage<::Msg::JoinRequest>(Arena*);
template<> ::Msg::JoinResponse* Arena::CreateMaybeMessage<::Msg::JoinResponse>(Arena*);
template<> ::Msg::LsFileRequest* Arena::CreateMaybeMessage<::Msg::LsFileRequest>(Arena*);
template<> ::Msg::LsFileResponse* Arena::CreateMaybeMessage<::Msg::LsFileResponse>(Arena*);
template<> ::Msg::Message* Arena::CreateMaybeMessage<::Msg::Message>(Arena*);
template<> ::Msg::MvFileRequest* Arena::CreateMaybeMessage<::Msg::MvFileRequest>(Arena*);
template<> ::Msg::NewFileRequest* Arena::CreateMaybeMessage<::Msg::NewFileRequest>(Arena*);
template<> ::Msg::NewFileResponse* Arena::CreateMaybeMessage<::Msg::NewFileResponse>(Arena*);
template<> ::Msg::Request* Arena::CreateMaybeMessage<::Msg::Request>(Arena*);
template<> ::Msg::Response* Arena::CreateMaybeMessage<::Msg::Response>(Arena*);
template<> ::Msg::RmFileRequest* Arena::CreateMaybeMessage<::Msg::RmFileRequest>(Arena*);
template<> ::Msg::UpdateStateHashRequest* Arena::CreateMaybeMessage<::Msg::UpdateStateHashRequest>(Arena*);
template<> ::Msg::UpdateStatusRequest* Arena::CreateMaybeMessage<::Msg::UpdateStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Msg {

enum MsgType {
  Join_Request = 1,
  Join_Response = 2,
  UpdateStatus_Request = 3,
  UpdateState_Request = 4,
  GetState_Request = 5,
  GetState_Response = 6,
  Common_Response = 7,
  MasterNotifyCmd_Request = 8,
  NewFile_Request = 9,
  NewFile_Response = 10,
  File_Post = 11,
  End_File_Post_Request = 12,
  End_File_Post_Response = 13,
  Rm_File_Request = 14,
  FileOp_Request = 15,
  LsFile_Request = 16,
  LsFile_Response = 17,
  MvFile_Request = 18,
  MvFile_Response = 19,
  CpFile_Request = 20,
  CpFile_Response = 21,
  GetFileOps_Request = 22,
  GetFileOps_Response = 23,
  GetFile_Request = 24,
  GetFile_Response = 25,
  GetFileChunk_Request = 26,
  GetFileChunk_Response = 27
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = Join_Request;
constexpr MsgType MsgType_MAX = GetFileChunk_Response;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
inline const std::string& MsgType_Name(MsgType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum FileType {
  FT_FILE = 1,
  FT_DIR = 2
};
bool FileType_IsValid(int value);
constexpr FileType FileType_MIN = FT_FILE;
constexpr FileType FileType_MAX = FT_DIR;
constexpr int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor();
inline const std::string& FileType_Name(FileType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileType_descriptor(), value);
}
inline bool FileType_Parse(
    const std::string& name, FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
enum FileOpType {
  NEW_OP = 1,
  NEW_DIR_OP = 2,
  RM_OP = 3,
  MV_OP = 4,
  CP_OP = 5
};
bool FileOpType_IsValid(int value);
constexpr FileOpType FileOpType_MIN = NEW_OP;
constexpr FileOpType FileOpType_MAX = CP_OP;
constexpr int FileOpType_ARRAYSIZE = FileOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileOpType_descriptor();
inline const std::string& FileOpType_Name(FileOpType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileOpType_descriptor(), value);
}
inline bool FileOpType_Parse(
    const std::string& name, FileOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileOpType>(
    FileOpType_descriptor(), name, value);
}
enum MsgResStatus {
  MSG_RES_OK = 1,
  MSG_RES_ERROR = 2
};
bool MsgResStatus_IsValid(int value);
constexpr MsgResStatus MsgResStatus_MIN = MSG_RES_OK;
constexpr MsgResStatus MsgResStatus_MAX = MSG_RES_ERROR;
constexpr int MsgResStatus_ARRAYSIZE = MsgResStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgResStatus_descriptor();
inline const std::string& MsgResStatus_Name(MsgResStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgResStatus_descriptor(), value);
}
inline bool MsgResStatus_Parse(
    const std::string& name, MsgResStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgResStatus>(
    MsgResStatus_descriptor(), name, value);
}
// ===================================================================

class FileOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.FileOp) */ {
 public:
  FileOp();
  virtual ~FileOp();

  FileOp(const FileOp& from);
  FileOp(FileOp&& from) noexcept
    : FileOp() {
    *this = ::std::move(from);
  }

  inline FileOp& operator=(const FileOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOp& operator=(FileOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileOp* internal_default_instance() {
    return reinterpret_cast<const FileOp*>(
               &_FileOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileOp* other);
  friend void swap(FileOp& a, FileOp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileOp* New() const final {
    return CreateMaybeMessage<FileOp>(nullptr);
  }

  FileOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileOp& from);
  void MergeFrom(const FileOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.FileOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional string dstPath = 3;
  bool has_dstpath() const;
  void clear_dstpath();
  static const int kDstPathFieldNumber = 3;
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);

  // required string newHash = 4;
  bool has_newhash() const;
  void clear_newhash();
  static const int kNewHashFieldNumber = 4;
  const std::string& newhash() const;
  void set_newhash(const std::string& value);
  void set_newhash(std::string&& value);
  void set_newhash(const char* value);
  void set_newhash(const char* value, size_t size);
  std::string* mutable_newhash();
  std::string* release_newhash();
  void set_allocated_newhash(std::string* newhash);

  // required .Msg.FileOpType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Msg::FileOpType type() const;
  void set_type(::Msg::FileOpType value);

  // @@protoc_insertion_point(class_scope:Msg.FileOp)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newhash_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.JoinRequest) */ {
 public:
  JoinRequest();
  virtual ~JoinRequest();

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JoinRequest* other);
  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRequest* New() const final {
    return CreateMaybeMessage<JoinRequest>(nullptr);
  }

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRequest& from);
  void MergeFrom(const JoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.JoinRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // required string port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);

  // required bytes auth = 4;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 4;
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);

  // @@protoc_insertion_point(class_scope:Msg.JoinRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.JoinResponse) */ {
 public:
  JoinResponse();
  virtual ~JoinResponse();

  JoinResponse(const JoinResponse& from);
  JoinResponse(JoinResponse&& from) noexcept
    : JoinResponse() {
    *this = ::std::move(from);
  }

  inline JoinResponse& operator=(const JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinResponse& operator=(JoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinResponse* internal_default_instance() {
    return reinterpret_cast<const JoinResponse*>(
               &_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(JoinResponse* other);
  friend void swap(JoinResponse& a, JoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinResponse* New() const final {
    return CreateMaybeMessage<JoinResponse>(nullptr);
  }

  JoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinResponse& from);
  void MergeFrom(const JoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.JoinResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes encrypedEncryptKey = 1;
  bool has_encrypedencryptkey() const;
  void clear_encrypedencryptkey();
  static const int kEncrypedEncryptKeyFieldNumber = 1;
  const std::string& encrypedencryptkey() const;
  void set_encrypedencryptkey(const std::string& value);
  void set_encrypedencryptkey(std::string&& value);
  void set_encrypedencryptkey(const char* value);
  void set_encrypedencryptkey(const void* value, size_t size);
  std::string* mutable_encrypedencryptkey();
  std::string* release_encrypedencryptkey();
  void set_allocated_encrypedencryptkey(std::string* encrypedencryptkey);

  // @@protoc_insertion_point(class_scope:Msg.JoinResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypedencryptkey_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class UpdateStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.UpdateStatusRequest) */ {
 public:
  UpdateStatusRequest();
  virtual ~UpdateStatusRequest();

  UpdateStatusRequest(const UpdateStatusRequest& from);
  UpdateStatusRequest(UpdateStatusRequest&& from) noexcept
    : UpdateStatusRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStatusRequest& operator=(const UpdateStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStatusRequest& operator=(UpdateStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStatusRequest*>(
               &_UpdateStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpdateStatusRequest* other);
  friend void swap(UpdateStatusRequest& a, UpdateStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateStatusRequest* New() const final {
    return CreateMaybeMessage<UpdateStatusRequest>(nullptr);
  }

  UpdateStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStatusRequest& from);
  void MergeFrom(const UpdateStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.UpdateStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int32 status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.UpdateStatusRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class UpdateStateHashRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.UpdateStateHashRequest) */ {
 public:
  UpdateStateHashRequest();
  virtual ~UpdateStateHashRequest();

  UpdateStateHashRequest(const UpdateStateHashRequest& from);
  UpdateStateHashRequest(UpdateStateHashRequest&& from) noexcept
    : UpdateStateHashRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStateHashRequest& operator=(const UpdateStateHashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStateHashRequest& operator=(UpdateStateHashRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateStateHashRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateStateHashRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStateHashRequest*>(
               &_UpdateStateHashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateStateHashRequest* other);
  friend void swap(UpdateStateHashRequest& a, UpdateStateHashRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateStateHashRequest* New() const final {
    return CreateMaybeMessage<UpdateStateHashRequest>(nullptr);
  }

  UpdateStateHashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStateHashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStateHashRequest& from);
  void MergeFrom(const UpdateStateHashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStateHashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.UpdateStateHashRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // required bytes auth = 3;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 3;
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);

  // @@protoc_insertion_point(class_scope:Msg.UpdateStateHashRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetStateRequest) */ {
 public:
  GetStateRequest();
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetStateRequest* other);
  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes auth = 2;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 2;
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);

  // @@protoc_insertion_point(class_scope:Msg.GetStateRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetStateResponse) */ {
 public:
  GetStateResponse();
  virtual ~GetStateResponse();

  GetStateResponse(const GetStateResponse& from);
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetStateResponse* other);
  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateResponse* New() const final {
    return CreateMaybeMessage<GetStateResponse>(nullptr);
  }

  GetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateResponse& from);
  void MergeFrom(const GetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 2;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // @@protoc_insertion_point(class_scope:Msg.GetStateResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class FileOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.FileOperation) */ {
 public:
  FileOperation();
  virtual ~FileOperation();

  FileOperation(const FileOperation& from);
  FileOperation(FileOperation&& from) noexcept
    : FileOperation() {
    *this = ::std::move(from);
  }

  inline FileOperation& operator=(const FileOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileOperation& operator=(FileOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileOperation* internal_default_instance() {
    return reinterpret_cast<const FileOperation*>(
               &_FileOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(FileOperation* other);
  friend void swap(FileOperation& a, FileOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileOperation* New() const final {
    return CreateMaybeMessage<FileOperation>(nullptr);
  }

  FileOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileOperation& from);
  void MergeFrom(const FileOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.FileOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src_path = 2;
  bool has_src_path() const;
  void clear_src_path();
  static const int kSrcPathFieldNumber = 2;
  const std::string& src_path() const;
  void set_src_path(const std::string& value);
  void set_src_path(std::string&& value);
  void set_src_path(const char* value);
  void set_src_path(const char* value, size_t size);
  std::string* mutable_src_path();
  std::string* release_src_path();
  void set_allocated_src_path(std::string* src_path);

  // required string dst_path = 3;
  bool has_dst_path() const;
  void clear_dst_path();
  static const int kDstPathFieldNumber = 3;
  const std::string& dst_path() const;
  void set_dst_path(const std::string& value);
  void set_dst_path(std::string&& value);
  void set_dst_path(const char* value);
  void set_dst_path(const char* value, size_t size);
  std::string* mutable_dst_path();
  std::string* release_dst_path();
  void set_allocated_dst_path(std::string* dst_path);

  // required string state_hash = 4;
  bool has_state_hash() const;
  void clear_state_hash();
  static const int kStateHashFieldNumber = 4;
  const std::string& state_hash() const;
  void set_state_hash(const std::string& value);
  void set_state_hash(std::string&& value);
  void set_state_hash(const char* value);
  void set_state_hash(const char* value, size_t size);
  std::string* mutable_state_hash();
  std::string* release_state_hash();
  void set_allocated_state_hash(std::string* state_hash);

  // required int64 opTime = 5;
  bool has_optime() const;
  void clear_optime();
  static const int kOpTimeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 optime() const;
  void set_optime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .Msg.FileOpType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Msg::FileOpType type() const;
  void set_type(::Msg::FileOpType value);

  // @@protoc_insertion_point(class_scope:Msg.FileOperation)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 optime_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileOpsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileOpsRequest) */ {
 public:
  GetFileOpsRequest();
  virtual ~GetFileOpsRequest();

  GetFileOpsRequest(const GetFileOpsRequest& from);
  GetFileOpsRequest(GetFileOpsRequest&& from) noexcept
    : GetFileOpsRequest() {
    *this = ::std::move(from);
  }

  inline GetFileOpsRequest& operator=(const GetFileOpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileOpsRequest& operator=(GetFileOpsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileOpsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileOpsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileOpsRequest*>(
               &_GetFileOpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetFileOpsRequest* other);
  friend void swap(GetFileOpsRequest& a, GetFileOpsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileOpsRequest* New() const final {
    return CreateMaybeMessage<GetFileOpsRequest>(nullptr);
  }

  GetFileOpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileOpsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileOpsRequest& from);
  void MergeFrom(const GetFileOpsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileOpsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileOpsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes auth = 2;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 2;
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);

  // required string newest_hash = 3;
  bool has_newest_hash() const;
  void clear_newest_hash();
  static const int kNewestHashFieldNumber = 3;
  const std::string& newest_hash() const;
  void set_newest_hash(const std::string& value);
  void set_newest_hash(std::string&& value);
  void set_newest_hash(const char* value);
  void set_newest_hash(const char* value, size_t size);
  std::string* mutable_newest_hash();
  std::string* release_newest_hash();
  void set_allocated_newest_hash(std::string* newest_hash);

  // @@protoc_insertion_point(class_scope:Msg.GetFileOpsRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newest_hash_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileOpsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileOpsResponse) */ {
 public:
  GetFileOpsResponse();
  virtual ~GetFileOpsResponse();

  GetFileOpsResponse(const GetFileOpsResponse& from);
  GetFileOpsResponse(GetFileOpsResponse&& from) noexcept
    : GetFileOpsResponse() {
    *this = ::std::move(from);
  }

  inline GetFileOpsResponse& operator=(const GetFileOpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileOpsResponse& operator=(GetFileOpsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileOpsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileOpsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileOpsResponse*>(
               &_GetFileOpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetFileOpsResponse* other);
  friend void swap(GetFileOpsResponse& a, GetFileOpsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileOpsResponse* New() const final {
    return CreateMaybeMessage<GetFileOpsResponse>(nullptr);
  }

  GetFileOpsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileOpsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileOpsResponse& from);
  void MergeFrom(const GetFileOpsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileOpsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileOpsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Msg.FileOperation ops = 2;
  int ops_size() const;
  void clear_ops();
  static const int kOpsFieldNumber = 2;
  ::Msg::FileOperation* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileOperation >*
      mutable_ops();
  const ::Msg::FileOperation& ops(int index) const;
  ::Msg::FileOperation* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileOperation >&
      ops() const;

  // @@protoc_insertion_point(class_scope:Msg.GetFileOpsResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileOperation > ops_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NewFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.NewFileRequest) */ {
 public:
  NewFileRequest();
  virtual ~NewFileRequest();

  NewFileRequest(const NewFileRequest& from);
  NewFileRequest(NewFileRequest&& from) noexcept
    : NewFileRequest() {
    *this = ::std::move(from);
  }

  inline NewFileRequest& operator=(const NewFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFileRequest& operator=(NewFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFileRequest* internal_default_instance() {
    return reinterpret_cast<const NewFileRequest*>(
               &_NewFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NewFileRequest* other);
  friend void swap(NewFileRequest& a, NewFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewFileRequest* New() const final {
    return CreateMaybeMessage<NewFileRequest>(nullptr);
  }

  NewFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFileRequest& from);
  void MergeFrom(const NewFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.NewFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int32 total_pack_size = 3;
  bool has_total_pack_size() const;
  void clear_total_pack_size();
  static const int kTotalPackSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 total_pack_size() const;
  void set_total_pack_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 total_file_size = 4;
  bool has_total_file_size() const;
  void clear_total_file_size();
  static const int kTotalFileSizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 total_file_size() const;
  void set_total_file_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .Msg.FileType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Msg::FileType type() const;
  void set_type(::Msg::FileType value);

  // @@protoc_insertion_point(class_scope:Msg.NewFileRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_pack_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_file_size_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NewFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.NewFileResponse) */ {
 public:
  NewFileResponse();
  virtual ~NewFileResponse();

  NewFileResponse(const NewFileResponse& from);
  NewFileResponse(NewFileResponse&& from) noexcept
    : NewFileResponse() {
    *this = ::std::move(from);
  }

  inline NewFileResponse& operator=(const NewFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFileResponse& operator=(NewFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFileResponse* internal_default_instance() {
    return reinterpret_cast<const NewFileResponse*>(
               &_NewFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(NewFileResponse* other);
  friend void swap(NewFileResponse& a, NewFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewFileResponse* New() const final {
    return CreateMaybeMessage<NewFileResponse>(nullptr);
  }

  NewFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFileResponse& from);
  void MergeFrom(const NewFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.NewFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 post_session_id = 1;
  bool has_post_session_id() const;
  void clear_post_session_id();
  static const int kPostSessionIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 post_session_id() const;
  void set_post_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.NewFileResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 post_session_id_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileRequest) */ {
 public:
  GetFileRequest();
  virtual ~GetFileRequest();

  GetFileRequest(const GetFileRequest& from);
  GetFileRequest(GetFileRequest&& from) noexcept
    : GetFileRequest() {
    *this = ::std::move(from);
  }

  inline GetFileRequest& operator=(const GetFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileRequest& operator=(GetFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileRequest*>(
               &_GetFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetFileRequest* other);
  friend void swap(GetFileRequest& a, GetFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileRequest* New() const final {
    return CreateMaybeMessage<GetFileRequest>(nullptr);
  }

  GetFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileRequest& from);
  void MergeFrom(const GetFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional bytes auth = 3;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 3;
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);

  // @@protoc_insertion_point(class_scope:Msg.GetFileRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileResponse) */ {
 public:
  GetFileResponse();
  virtual ~GetFileResponse();

  GetFileResponse(const GetFileResponse& from);
  GetFileResponse(GetFileResponse&& from) noexcept
    : GetFileResponse() {
    *this = ::std::move(from);
  }

  inline GetFileResponse& operator=(const GetFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileResponse& operator=(GetFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileResponse*>(
               &_GetFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetFileResponse* other);
  friend void swap(GetFileResponse& a, GetFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileResponse* New() const final {
    return CreateMaybeMessage<GetFileResponse>(nullptr);
  }

  GetFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileResponse& from);
  void MergeFrom(const GetFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string session_key = 2;
  bool has_session_key() const;
  void clear_session_key();
  static const int kSessionKeyFieldNumber = 2;
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // required int32 total_file_size = 3;
  bool has_total_file_size() const;
  void clear_total_file_size();
  static const int kTotalFileSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 total_file_size() const;
  void set_total_file_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.GetFileResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_file_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileChunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileChunkRequest) */ {
 public:
  GetFileChunkRequest();
  virtual ~GetFileChunkRequest();

  GetFileChunkRequest(const GetFileChunkRequest& from);
  GetFileChunkRequest(GetFileChunkRequest&& from) noexcept
    : GetFileChunkRequest() {
    *this = ::std::move(from);
  }

  inline GetFileChunkRequest& operator=(const GetFileChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileChunkRequest& operator=(GetFileChunkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileChunkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileChunkRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileChunkRequest*>(
               &_GetFileChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GetFileChunkRequest* other);
  friend void swap(GetFileChunkRequest& a, GetFileChunkRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileChunkRequest* New() const final {
    return CreateMaybeMessage<GetFileChunkRequest>(nullptr);
  }

  GetFileChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileChunkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileChunkRequest& from);
  void MergeFrom(const GetFileChunkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileChunkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileChunkRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // required string session_key = 3;
  bool has_session_key() const;
  void clear_session_key();
  static const int kSessionKeyFieldNumber = 3;
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // required int32 fileIdx = 2;
  bool has_fileidx() const;
  void clear_fileidx();
  static const int kFileIdxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 fileidx() const;
  void set_fileidx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.GetFileChunkRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 fileidx_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFileChunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.GetFileChunkResponse) */ {
 public:
  GetFileChunkResponse();
  virtual ~GetFileChunkResponse();

  GetFileChunkResponse(const GetFileChunkResponse& from);
  GetFileChunkResponse(GetFileChunkResponse&& from) noexcept
    : GetFileChunkResponse() {
    *this = ::std::move(from);
  }

  inline GetFileChunkResponse& operator=(const GetFileChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileChunkResponse& operator=(GetFileChunkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileChunkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileChunkResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileChunkResponse*>(
               &_GetFileChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GetFileChunkResponse* other);
  friend void swap(GetFileChunkResponse& a, GetFileChunkResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileChunkResponse* New() const final {
    return CreateMaybeMessage<GetFileChunkResponse>(nullptr);
  }

  GetFileChunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileChunkResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileChunkResponse& from);
  void MergeFrom(const GetFileChunkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileChunkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.GetFileChunkResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:Msg.GetFileChunkResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RmFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.RmFileRequest) */ {
 public:
  RmFileRequest();
  virtual ~RmFileRequest();

  RmFileRequest(const RmFileRequest& from);
  RmFileRequest(RmFileRequest&& from) noexcept
    : RmFileRequest() {
    *this = ::std::move(from);
  }

  inline RmFileRequest& operator=(const RmFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RmFileRequest& operator=(RmFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RmFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RmFileRequest* internal_default_instance() {
    return reinterpret_cast<const RmFileRequest*>(
               &_RmFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RmFileRequest* other);
  friend void swap(RmFileRequest& a, RmFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RmFileRequest* New() const final {
    return CreateMaybeMessage<RmFileRequest>(nullptr);
  }

  RmFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RmFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RmFileRequest& from);
  void MergeFrom(const RmFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RmFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.RmFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // @@protoc_insertion_point(class_scope:Msg.RmFileRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class FilePost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.FilePost) */ {
 public:
  FilePost();
  virtual ~FilePost();

  FilePost(const FilePost& from);
  FilePost(FilePost&& from) noexcept
    : FilePost() {
    *this = ::std::move(from);
  }

  inline FilePost& operator=(const FilePost& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePost& operator=(FilePost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FilePost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePost* internal_default_instance() {
    return reinterpret_cast<const FilePost*>(
               &_FilePost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FilePost* other);
  friend void swap(FilePost& a, FilePost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilePost* New() const final {
    return CreateMaybeMessage<FilePost>(nullptr);
  }

  FilePost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePost& from);
  void MergeFrom(const FilePost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.FilePost";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // required int64 post_session_id = 2;
  bool has_post_session_id() const;
  void clear_post_session_id();
  static const int kPostSessionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 post_session_id() const;
  void set_post_session_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 pack_idx = 3;
  bool has_pack_idx() const;
  void clear_pack_idx();
  static const int kPackIdxFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_idx() const;
  void set_pack_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 file_idx = 4;
  bool has_file_idx() const;
  void clear_file_idx();
  static const int kFileIdxFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 file_idx() const;
  void set_file_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 data_size = 6;
  bool has_data_size() const;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.FilePost)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 post_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class EndFilePostRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.EndFilePostRequest) */ {
 public:
  EndFilePostRequest();
  virtual ~EndFilePostRequest();

  EndFilePostRequest(const EndFilePostRequest& from);
  EndFilePostRequest(EndFilePostRequest&& from) noexcept
    : EndFilePostRequest() {
    *this = ::std::move(from);
  }

  inline EndFilePostRequest& operator=(const EndFilePostRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndFilePostRequest& operator=(EndFilePostRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EndFilePostRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndFilePostRequest* internal_default_instance() {
    return reinterpret_cast<const EndFilePostRequest*>(
               &_EndFilePostRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(EndFilePostRequest* other);
  friend void swap(EndFilePostRequest& a, EndFilePostRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndFilePostRequest* New() const final {
    return CreateMaybeMessage<EndFilePostRequest>(nullptr);
  }

  EndFilePostRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndFilePostRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndFilePostRequest& from);
  void MergeFrom(const EndFilePostRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndFilePostRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.EndFilePostRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:Msg.EndFilePostRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class EndFilePostResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.EndFilePostResponse) */ {
 public:
  EndFilePostResponse();
  virtual ~EndFilePostResponse();

  EndFilePostResponse(const EndFilePostResponse& from);
  EndFilePostResponse(EndFilePostResponse&& from) noexcept
    : EndFilePostResponse() {
    *this = ::std::move(from);
  }

  inline EndFilePostResponse& operator=(const EndFilePostResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndFilePostResponse& operator=(EndFilePostResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EndFilePostResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndFilePostResponse* internal_default_instance() {
    return reinterpret_cast<const EndFilePostResponse*>(
               &_EndFilePostResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(EndFilePostResponse* other);
  friend void swap(EndFilePostResponse& a, EndFilePostResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndFilePostResponse* New() const final {
    return CreateMaybeMessage<EndFilePostResponse>(nullptr);
  }

  EndFilePostResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndFilePostResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndFilePostResponse& from);
  void MergeFrom(const EndFilePostResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndFilePostResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.EndFilePostResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ok = 1;
  bool has_ok() const;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // optional int32 lost_pack_idx = 2;
  bool has_lost_pack_idx() const;
  void clear_lost_pack_idx();
  static const int kLostPackIdxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 lost_pack_idx() const;
  void set_lost_pack_idx(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Msg.EndFilePostResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 lost_pack_idx_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LsFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.LsFileRequest) */ {
 public:
  LsFileRequest();
  virtual ~LsFileRequest();

  LsFileRequest(const LsFileRequest& from);
  LsFileRequest(LsFileRequest&& from) noexcept
    : LsFileRequest() {
    *this = ::std::move(from);
  }

  inline LsFileRequest& operator=(const LsFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsFileRequest& operator=(LsFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LsFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsFileRequest* internal_default_instance() {
    return reinterpret_cast<const LsFileRequest*>(
               &_LsFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(LsFileRequest* other);
  friend void swap(LsFileRequest& a, LsFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LsFileRequest* New() const final {
    return CreateMaybeMessage<LsFileRequest>(nullptr);
  }

  LsFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsFileRequest& from);
  void MergeFrom(const LsFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.LsFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // @@protoc_insertion_point(class_scope:Msg.LsFileRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class FileAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.FileAttribute) */ {
 public:
  FileAttribute();
  virtual ~FileAttribute();

  FileAttribute(const FileAttribute& from);
  FileAttribute(FileAttribute&& from) noexcept
    : FileAttribute() {
    *this = ::std::move(from);
  }

  inline FileAttribute& operator=(const FileAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileAttribute& operator=(FileAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileAttribute* internal_default_instance() {
    return reinterpret_cast<const FileAttribute*>(
               &_FileAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(FileAttribute* other);
  friend void swap(FileAttribute& a, FileAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileAttribute* New() const final {
    return CreateMaybeMessage<FileAttribute>(nullptr);
  }

  FileAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileAttribute& from);
  void MergeFrom(const FileAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.FileAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // required int32 size = 3;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .Msg.FileType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Msg::FileType type() const;
  void set_type(::Msg::FileType value);

  // @@protoc_insertion_point(class_scope:Msg.FileAttribute)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LsFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.LsFileResponse) */ {
 public:
  LsFileResponse();
  virtual ~LsFileResponse();

  LsFileResponse(const LsFileResponse& from);
  LsFileResponse(LsFileResponse&& from) noexcept
    : LsFileResponse() {
    *this = ::std::move(from);
  }

  inline LsFileResponse& operator=(const LsFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsFileResponse& operator=(LsFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LsFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsFileResponse* internal_default_instance() {
    return reinterpret_cast<const LsFileResponse*>(
               &_LsFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(LsFileResponse* other);
  friend void swap(LsFileResponse& a, LsFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LsFileResponse* New() const final {
    return CreateMaybeMessage<LsFileResponse>(nullptr);
  }

  LsFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsFileResponse& from);
  void MergeFrom(const LsFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.LsFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Msg.FileAttribute files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  ::Msg::FileAttribute* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileAttribute >*
      mutable_files();
  const ::Msg::FileAttribute& files(int index) const;
  ::Msg::FileAttribute* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileAttribute >&
      files() const;

  // @@protoc_insertion_point(class_scope:Msg.LsFileResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileAttribute > files_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MvFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.MvFileRequest) */ {
 public:
  MvFileRequest();
  virtual ~MvFileRequest();

  MvFileRequest(const MvFileRequest& from);
  MvFileRequest(MvFileRequest&& from) noexcept
    : MvFileRequest() {
    *this = ::std::move(from);
  }

  inline MvFileRequest& operator=(const MvFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MvFileRequest& operator=(MvFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MvFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MvFileRequest* internal_default_instance() {
    return reinterpret_cast<const MvFileRequest*>(
               &_MvFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(MvFileRequest* other);
  friend void swap(MvFileRequest& a, MvFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MvFileRequest* New() const final {
    return CreateMaybeMessage<MvFileRequest>(nullptr);
  }

  MvFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MvFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MvFileRequest& from);
  void MergeFrom(const MvFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MvFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.MvFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string srcPath = 1;
  bool has_srcpath() const;
  void clear_srcpath();
  static const int kSrcPathFieldNumber = 1;
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);

  // required string dstPath = 2;
  bool has_dstpath() const;
  void clear_dstpath();
  static const int kDstPathFieldNumber = 2;
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);

  // @@protoc_insertion_point(class_scope:Msg.MvFileRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CpFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.CpFileRequest) */ {
 public:
  CpFileRequest();
  virtual ~CpFileRequest();

  CpFileRequest(const CpFileRequest& from);
  CpFileRequest(CpFileRequest&& from) noexcept
    : CpFileRequest() {
    *this = ::std::move(from);
  }

  inline CpFileRequest& operator=(const CpFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpFileRequest& operator=(CpFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CpFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpFileRequest* internal_default_instance() {
    return reinterpret_cast<const CpFileRequest*>(
               &_CpFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CpFileRequest* other);
  friend void swap(CpFileRequest& a, CpFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CpFileRequest* New() const final {
    return CreateMaybeMessage<CpFileRequest>(nullptr);
  }

  CpFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpFileRequest& from);
  void MergeFrom(const CpFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.CpFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string srcPath = 1;
  bool has_srcpath() const;
  void clear_srcpath();
  static const int kSrcPathFieldNumber = 1;
  const std::string& srcpath() const;
  void set_srcpath(const std::string& value);
  void set_srcpath(std::string&& value);
  void set_srcpath(const char* value);
  void set_srcpath(const char* value, size_t size);
  std::string* mutable_srcpath();
  std::string* release_srcpath();
  void set_allocated_srcpath(std::string* srcpath);

  // required string dstPath = 2;
  bool has_dstpath() const;
  void clear_dstpath();
  static const int kDstPathFieldNumber = 2;
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);

  // @@protoc_insertion_point(class_scope:Msg.CpFileRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Msg.JoinRequest join = 1;
  bool has_join() const;
  void clear_join();
  static const int kJoinFieldNumber = 1;
  const ::Msg::JoinRequest& join() const;
  ::Msg::JoinRequest* release_join();
  ::Msg::JoinRequest* mutable_join();
  void set_allocated_join(::Msg::JoinRequest* join);

  // optional .Msg.UpdateStatusRequest update_status = 2;
  bool has_update_status() const;
  void clear_update_status();
  static const int kUpdateStatusFieldNumber = 2;
  const ::Msg::UpdateStatusRequest& update_status() const;
  ::Msg::UpdateStatusRequest* release_update_status();
  ::Msg::UpdateStatusRequest* mutable_update_status();
  void set_allocated_update_status(::Msg::UpdateStatusRequest* update_status);

  // optional .Msg.GetStateRequest get_state_req = 3;
  bool has_get_state_req() const;
  void clear_get_state_req();
  static const int kGetStateReqFieldNumber = 3;
  const ::Msg::GetStateRequest& get_state_req() const;
  ::Msg::GetStateRequest* release_get_state_req();
  ::Msg::GetStateRequest* mutable_get_state_req();
  void set_allocated_get_state_req(::Msg::GetStateRequest* get_state_req);

  // optional .Msg.UpdateStateHashRequest state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  const ::Msg::UpdateStateHashRequest& state() const;
  ::Msg::UpdateStateHashRequest* release_state();
  ::Msg::UpdateStateHashRequest* mutable_state();
  void set_allocated_state(::Msg::UpdateStateHashRequest* state);

  // optional .Msg.NewFileRequest file = 5;
  bool has_file() const;
  void clear_file();
  static const int kFileFieldNumber = 5;
  const ::Msg::NewFileRequest& file() const;
  ::Msg::NewFileRequest* release_file();
  ::Msg::NewFileRequest* mutable_file();
  void set_allocated_file(::Msg::NewFileRequest* file);

  // optional .Msg.RmFileRequest rm_op = 6;
  bool has_rm_op() const;
  void clear_rm_op();
  static const int kRmOpFieldNumber = 6;
  const ::Msg::RmFileRequest& rm_op() const;
  ::Msg::RmFileRequest* release_rm_op();
  ::Msg::RmFileRequest* mutable_rm_op();
  void set_allocated_rm_op(::Msg::RmFileRequest* rm_op);

  // optional .Msg.LsFileRequest ls_file_req = 7;
  bool has_ls_file_req() const;
  void clear_ls_file_req();
  static const int kLsFileReqFieldNumber = 7;
  const ::Msg::LsFileRequest& ls_file_req() const;
  ::Msg::LsFileRequest* release_ls_file_req();
  ::Msg::LsFileRequest* mutable_ls_file_req();
  void set_allocated_ls_file_req(::Msg::LsFileRequest* ls_file_req);

  // optional .Msg.MvFileRequest mv_file_req = 8;
  bool has_mv_file_req() const;
  void clear_mv_file_req();
  static const int kMvFileReqFieldNumber = 8;
  const ::Msg::MvFileRequest& mv_file_req() const;
  ::Msg::MvFileRequest* release_mv_file_req();
  ::Msg::MvFileRequest* mutable_mv_file_req();
  void set_allocated_mv_file_req(::Msg::MvFileRequest* mv_file_req);

  // optional .Msg.CpFileRequest cp_file_req = 9;
  bool has_cp_file_req() const;
  void clear_cp_file_req();
  static const int kCpFileReqFieldNumber = 9;
  const ::Msg::CpFileRequest& cp_file_req() const;
  ::Msg::CpFileRequest* release_cp_file_req();
  ::Msg::CpFileRequest* mutable_cp_file_req();
  void set_allocated_cp_file_req(::Msg::CpFileRequest* cp_file_req);

  // optional .Msg.GetFileOpsRequest get_file_ops_req = 10;
  bool has_get_file_ops_req() const;
  void clear_get_file_ops_req();
  static const int kGetFileOpsReqFieldNumber = 10;
  const ::Msg::GetFileOpsRequest& get_file_ops_req() const;
  ::Msg::GetFileOpsRequest* release_get_file_ops_req();
  ::Msg::GetFileOpsRequest* mutable_get_file_ops_req();
  void set_allocated_get_file_ops_req(::Msg::GetFileOpsRequest* get_file_ops_req);

  // optional .Msg.GetFileRequest get_file_req = 11;
  bool has_get_file_req() const;
  void clear_get_file_req();
  static const int kGetFileReqFieldNumber = 11;
  const ::Msg::GetFileRequest& get_file_req() const;
  ::Msg::GetFileRequest* release_get_file_req();
  ::Msg::GetFileRequest* mutable_get_file_req();
  void set_allocated_get_file_req(::Msg::GetFileRequest* get_file_req);

  // optional .Msg.GetFileChunkRequest get_file_chunk_req = 12;
  bool has_get_file_chunk_req() const;
  void clear_get_file_chunk_req();
  static const int kGetFileChunkReqFieldNumber = 12;
  const ::Msg::GetFileChunkRequest& get_file_chunk_req() const;
  ::Msg::GetFileChunkRequest* release_get_file_chunk_req();
  ::Msg::GetFileChunkRequest* mutable_get_file_chunk_req();
  void set_allocated_get_file_chunk_req(::Msg::GetFileChunkRequest* get_file_chunk_req);

  // @@protoc_insertion_point(class_scope:Msg.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Msg::JoinRequest* join_;
  ::Msg::UpdateStatusRequest* update_status_;
  ::Msg::GetStateRequest* get_state_req_;
  ::Msg::UpdateStateHashRequest* state_;
  ::Msg::NewFileRequest* file_;
  ::Msg::RmFileRequest* rm_op_;
  ::Msg::LsFileRequest* ls_file_req_;
  ::Msg::MvFileRequest* mv_file_req_;
  ::Msg::CpFileRequest* cp_file_req_;
  ::Msg::GetFileOpsRequest* get_file_ops_req_;
  ::Msg::GetFileRequest* get_file_req_;
  ::Msg::GetFileChunkRequest* get_file_chunk_req_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // optional .Msg.GetStateResponse get_state_res = 3;
  bool has_get_state_res() const;
  void clear_get_state_res();
  static const int kGetStateResFieldNumber = 3;
  const ::Msg::GetStateResponse& get_state_res() const;
  ::Msg::GetStateResponse* release_get_state_res();
  ::Msg::GetStateResponse* mutable_get_state_res();
  void set_allocated_get_state_res(::Msg::GetStateResponse* get_state_res);

  // optional .Msg.NewFileResponse new_file_response = 4;
  bool has_new_file_response() const;
  void clear_new_file_response();
  static const int kNewFileResponseFieldNumber = 4;
  const ::Msg::NewFileResponse& new_file_response() const;
  ::Msg::NewFileResponse* release_new_file_response();
  ::Msg::NewFileResponse* mutable_new_file_response();
  void set_allocated_new_file_response(::Msg::NewFileResponse* new_file_response);

  // optional .Msg.LsFileResponse ls_file_res = 5;
  bool has_ls_file_res() const;
  void clear_ls_file_res();
  static const int kLsFileResFieldNumber = 5;
  const ::Msg::LsFileResponse& ls_file_res() const;
  ::Msg::LsFileResponse* release_ls_file_res();
  ::Msg::LsFileResponse* mutable_ls_file_res();
  void set_allocated_ls_file_res(::Msg::LsFileResponse* ls_file_res);

  // optional .Msg.JoinResponse join_res = 6;
  bool has_join_res() const;
  void clear_join_res();
  static const int kJoinResFieldNumber = 6;
  const ::Msg::JoinResponse& join_res() const;
  ::Msg::JoinResponse* release_join_res();
  ::Msg::JoinResponse* mutable_join_res();
  void set_allocated_join_res(::Msg::JoinResponse* join_res);

  // optional .Msg.GetFileOpsResponse get_file_ops_res = 7;
  bool has_get_file_ops_res() const;
  void clear_get_file_ops_res();
  static const int kGetFileOpsResFieldNumber = 7;
  const ::Msg::GetFileOpsResponse& get_file_ops_res() const;
  ::Msg::GetFileOpsResponse* release_get_file_ops_res();
  ::Msg::GetFileOpsResponse* mutable_get_file_ops_res();
  void set_allocated_get_file_ops_res(::Msg::GetFileOpsResponse* get_file_ops_res);

  // optional .Msg.GetFileResponse get_file_res = 8;
  bool has_get_file_res() const;
  void clear_get_file_res();
  static const int kGetFileResFieldNumber = 8;
  const ::Msg::GetFileResponse& get_file_res() const;
  ::Msg::GetFileResponse* release_get_file_res();
  ::Msg::GetFileResponse* mutable_get_file_res();
  void set_allocated_get_file_res(::Msg::GetFileResponse* get_file_res);

  // optional .Msg.GetFileChunkResponse get_file_chunk_res = 9;
  bool has_get_file_chunk_res() const;
  void clear_get_file_chunk_res();
  static const int kGetFileChunkResFieldNumber = 9;
  const ::Msg::GetFileChunkResponse& get_file_chunk_res() const;
  ::Msg::GetFileChunkResponse* release_get_file_chunk_res();
  ::Msg::GetFileChunkResponse* mutable_get_file_chunk_res();
  void set_allocated_get_file_chunk_res(::Msg::GetFileChunkResponse* get_file_chunk_res);

  // required .Msg.MsgResStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::Msg::MsgResStatus status() const;
  void set_status(::Msg::MsgResStatus value);

  // @@protoc_insertion_point(class_scope:Msg.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::Msg::GetStateResponse* get_state_res_;
  ::Msg::NewFileResponse* new_file_response_;
  ::Msg::LsFileResponse* ls_file_res_;
  ::Msg::JoinResponse* join_res_;
  ::Msg::GetFileOpsResponse* get_file_ops_res_;
  ::Msg::GetFileResponse* get_file_res_;
  ::Msg::GetFileChunkResponse* get_file_chunk_res_;
  int status_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Msg.Request request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::Msg::Request& request() const;
  ::Msg::Request* release_request();
  ::Msg::Request* mutable_request();
  void set_allocated_request(::Msg::Request* request);

  // optional .Msg.Response response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::Msg::Response& response() const;
  ::Msg::Response* release_response();
  ::Msg::Response* mutable_response();
  void set_allocated_response(::Msg::Response* response);

  // optional .Msg.FilePost file_post = 4;
  bool has_file_post() const;
  void clear_file_post();
  static const int kFilePostFieldNumber = 4;
  const ::Msg::FilePost& file_post() const;
  ::Msg::FilePost* release_file_post();
  ::Msg::FilePost* mutable_file_post();
  void set_allocated_file_post(::Msg::FilePost* file_post);

  // required .Msg.MsgType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Msg::MsgType type() const;
  void set_type(::Msg::MsgType value);

  // @@protoc_insertion_point(class_scope:Msg.Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Msg::Request* request_;
  ::Msg::Response* response_;
  ::Msg::FilePost* file_post_;
  int type_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileOp

// required .Msg.FileOpType type = 1;
inline bool FileOp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileOp::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Msg::FileOpType FileOp::type() const {
  // @@protoc_insertion_point(field_get:Msg.FileOp.type)
  return static_cast< ::Msg::FileOpType >(type_);
}
inline void FileOp::set_type(::Msg::FileOpType value) {
  assert(::Msg::FileOpType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.FileOp.type)
}

// required string path = 2;
inline bool FileOp::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileOp::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileOp::path() const {
  // @@protoc_insertion_point(field_get:Msg.FileOp.path)
  return path_.GetNoArena();
}
inline void FileOp::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOp.path)
}
inline void FileOp::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOp.path)
}
inline void FileOp::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOp.path)
}
inline void FileOp::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOp.path)
}
inline std::string* FileOp::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOp.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOp::release_path() {
  // @@protoc_insertion_point(field_release:Msg.FileOp.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOp::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOp.path)
}

// optional string dstPath = 3;
inline bool FileOp::has_dstpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileOp::clear_dstpath() {
  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileOp::dstpath() const {
  // @@protoc_insertion_point(field_get:Msg.FileOp.dstPath)
  return dstpath_.GetNoArena();
}
inline void FileOp::set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOp.dstPath)
}
inline void FileOp::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOp.dstPath)
}
inline void FileOp::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOp.dstPath)
}
inline void FileOp::set_dstpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOp.dstPath)
}
inline std::string* FileOp::mutable_dstpath() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOp.dstPath)
  return dstpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOp::release_dstpath() {
  // @@protoc_insertion_point(field_release:Msg.FileOp.dstPath)
  if (!has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dstpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOp::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOp.dstPath)
}

// required string newHash = 4;
inline bool FileOp::has_newhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileOp::clear_newhash() {
  newhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileOp::newhash() const {
  // @@protoc_insertion_point(field_get:Msg.FileOp.newHash)
  return newhash_.GetNoArena();
}
inline void FileOp::set_newhash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  newhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOp.newHash)
}
inline void FileOp::set_newhash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  newhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOp.newHash)
}
inline void FileOp::set_newhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  newhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOp.newHash)
}
inline void FileOp::set_newhash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  newhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOp.newHash)
}
inline std::string* FileOp::mutable_newhash() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOp.newHash)
  return newhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOp::release_newhash() {
  // @@protoc_insertion_point(field_release:Msg.FileOp.newHash)
  if (!has_newhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return newhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOp::set_allocated_newhash(std::string* newhash) {
  if (newhash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  newhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newhash);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOp.newHash)
}

// -------------------------------------------------------------------

// JoinRequest

// required string name = 1;
inline bool JoinRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.name)
  return name_.GetNoArena();
}
inline void JoinRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.name)
}
inline void JoinRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.name)
}
inline std::string* JoinRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.name)
}

// required string ip = 2;
inline bool JoinRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinRequest::ip() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.ip)
  return ip_.GetNoArena();
}
inline void JoinRequest::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.ip)
}
inline void JoinRequest::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.ip)
}
inline std::string* JoinRequest::mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.ip)
}

// required string port = 3;
inline bool JoinRequest::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinRequest::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& JoinRequest::port() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.port)
  return port_.GetNoArena();
}
inline void JoinRequest::set_port(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.port)
}
inline void JoinRequest::set_port(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.port)
}
inline void JoinRequest::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.port)
}
inline void JoinRequest::set_port(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.port)
}
inline std::string* JoinRequest::mutable_port() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.port)
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_port() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.port)
  if (!has_port()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return port_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.port)
}

// required bytes auth = 4;
inline bool JoinRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& JoinRequest::auth() const {
  // @@protoc_insertion_point(field_get:Msg.JoinRequest.auth)
  return auth_.GetNoArena();
}
inline void JoinRequest::set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinRequest.auth)
}
inline void JoinRequest::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinRequest.auth)
}
inline void JoinRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinRequest.auth)
}
inline void JoinRequest::set_auth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinRequest.auth)
}
inline std::string* JoinRequest::mutable_auth() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinRequest.auth)
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinRequest::release_auth() {
  // @@protoc_insertion_point(field_release:Msg.JoinRequest.auth)
  if (!has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return auth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinRequest.auth)
}

// -------------------------------------------------------------------

// JoinResponse

// required bytes encrypedEncryptKey = 1;
inline bool JoinResponse::has_encrypedencryptkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinResponse::clear_encrypedencryptkey() {
  encrypedencryptkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinResponse::encrypedencryptkey() const {
  // @@protoc_insertion_point(field_get:Msg.JoinResponse.encrypedEncryptKey)
  return encrypedencryptkey_.GetNoArena();
}
inline void JoinResponse::set_encrypedencryptkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypedencryptkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.JoinResponse.encrypedEncryptKey)
}
inline void JoinResponse::set_encrypedencryptkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypedencryptkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.JoinResponse.encrypedEncryptKey)
}
inline void JoinResponse::set_encrypedencryptkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypedencryptkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.JoinResponse.encrypedEncryptKey)
}
inline void JoinResponse::set_encrypedencryptkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypedencryptkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.JoinResponse.encrypedEncryptKey)
}
inline std::string* JoinResponse::mutable_encrypedencryptkey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.JoinResponse.encrypedEncryptKey)
  return encrypedencryptkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinResponse::release_encrypedencryptkey() {
  // @@protoc_insertion_point(field_release:Msg.JoinResponse.encrypedEncryptKey)
  if (!has_encrypedencryptkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypedencryptkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinResponse::set_allocated_encrypedencryptkey(std::string* encrypedencryptkey) {
  if (encrypedencryptkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypedencryptkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypedencryptkey);
  // @@protoc_insertion_point(field_set_allocated:Msg.JoinResponse.encrypedEncryptKey)
}

// -------------------------------------------------------------------

// UpdateStatusRequest

// required string name = 1;
inline bool UpdateStatusRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStatusRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateStatusRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStatusRequest.name)
  return name_.GetNoArena();
}
inline void UpdateStatusRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStatusRequest.name)
}
inline void UpdateStatusRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStatusRequest.name)
}
inline std::string* UpdateStatusRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStatusRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStatusRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStatusRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStatusRequest.name)
}

// required int32 status = 2;
inline bool UpdateStatusRequest::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStatusRequest::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStatusRequest.status)
  return status_;
}
inline void UpdateStatusRequest::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Msg.UpdateStatusRequest.status)
}

// -------------------------------------------------------------------

// UpdateStateHashRequest

// required string name = 1;
inline bool UpdateStateHashRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStateHashRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateStateHashRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStateHashRequest.name)
  return name_.GetNoArena();
}
inline void UpdateStateHashRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStateHashRequest.name)
}
inline void UpdateStateHashRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStateHashRequest.name)
}
inline std::string* UpdateStateHashRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStateHashRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStateHashRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStateHashRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStateHashRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStateHashRequest.name)
}

// required string hash = 2;
inline bool UpdateStateHashRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStateHashRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateStateHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStateHashRequest.hash)
  return hash_.GetNoArena();
}
inline void UpdateStateHashRequest::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStateHashRequest.hash)
}
inline void UpdateStateHashRequest::set_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStateHashRequest.hash)
}
inline std::string* UpdateStateHashRequest::mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStateHashRequest.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStateHashRequest::release_hash() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStateHashRequest.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStateHashRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStateHashRequest.hash)
}

// required bytes auth = 3;
inline bool UpdateStateHashRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateStateHashRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UpdateStateHashRequest::auth() const {
  // @@protoc_insertion_point(field_get:Msg.UpdateStateHashRequest.auth)
  return auth_.GetNoArena();
}
inline void UpdateStateHashRequest::set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.UpdateStateHashRequest.auth)
}
inline void UpdateStateHashRequest::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.UpdateStateHashRequest.auth)
}
inline void UpdateStateHashRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.UpdateStateHashRequest.auth)
}
inline void UpdateStateHashRequest::set_auth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.UpdateStateHashRequest.auth)
}
inline std::string* UpdateStateHashRequest::mutable_auth() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.UpdateStateHashRequest.auth)
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateStateHashRequest::release_auth() {
  // @@protoc_insertion_point(field_release:Msg.UpdateStateHashRequest.auth)
  if (!has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return auth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateStateHashRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:Msg.UpdateStateHashRequest.auth)
}

// -------------------------------------------------------------------

// GetStateRequest

// required string name = 1;
inline bool GetStateRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStateRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateRequest.name)
  return name_.GetNoArena();
}
inline void GetStateRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateRequest.name)
}
inline void GetStateRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateRequest.name)
}
inline void GetStateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateRequest.name)
}
inline void GetStateRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateRequest.name)
}
inline std::string* GetStateRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.GetStateRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateRequest.name)
}

// required bytes auth = 2;
inline bool GetStateRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetStateRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetStateRequest::auth() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateRequest.auth)
  return auth_.GetNoArena();
}
inline void GetStateRequest::set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateRequest.auth)
}
inline void GetStateRequest::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateRequest.auth)
}
inline void GetStateRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateRequest.auth)
}
inline void GetStateRequest::set_auth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateRequest.auth)
}
inline std::string* GetStateRequest::mutable_auth() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateRequest.auth)
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateRequest::release_auth() {
  // @@protoc_insertion_point(field_release:Msg.GetStateRequest.auth)
  if (!has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return auth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateRequest.auth)
}

// -------------------------------------------------------------------

// GetStateResponse

// optional bytes hash = 2;
inline bool GetStateResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStateResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStateResponse::hash() const {
  // @@protoc_insertion_point(field_get:Msg.GetStateResponse.hash)
  return hash_.GetNoArena();
}
inline void GetStateResponse::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetStateResponse.hash)
}
inline void GetStateResponse::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetStateResponse.hash)
}
inline void GetStateResponse::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetStateResponse.hash)
}
inline void GetStateResponse::set_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetStateResponse.hash)
}
inline std::string* GetStateResponse::mutable_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetStateResponse.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateResponse::release_hash() {
  // @@protoc_insertion_point(field_release:Msg.GetStateResponse.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetStateResponse.hash)
}

// -------------------------------------------------------------------

// FileOperation

// required .Msg.FileOpType type = 1;
inline bool FileOperation::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileOperation::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Msg::FileOpType FileOperation::type() const {
  // @@protoc_insertion_point(field_get:Msg.FileOperation.type)
  return static_cast< ::Msg::FileOpType >(type_);
}
inline void FileOperation::set_type(::Msg::FileOpType value) {
  assert(::Msg::FileOpType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.FileOperation.type)
}

// required string src_path = 2;
inline bool FileOperation::has_src_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileOperation::clear_src_path() {
  src_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileOperation::src_path() const {
  // @@protoc_insertion_point(field_get:Msg.FileOperation.src_path)
  return src_path_.GetNoArena();
}
inline void FileOperation::set_src_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOperation.src_path)
}
inline void FileOperation::set_src_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOperation.src_path)
}
inline void FileOperation::set_src_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOperation.src_path)
}
inline void FileOperation::set_src_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOperation.src_path)
}
inline std::string* FileOperation::mutable_src_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOperation.src_path)
  return src_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOperation::release_src_path() {
  // @@protoc_insertion_point(field_release:Msg.FileOperation.src_path)
  if (!has_src_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOperation::set_allocated_src_path(std::string* src_path) {
  if (src_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_path);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOperation.src_path)
}

// required string dst_path = 3;
inline bool FileOperation::has_dst_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileOperation::clear_dst_path() {
  dst_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileOperation::dst_path() const {
  // @@protoc_insertion_point(field_get:Msg.FileOperation.dst_path)
  return dst_path_.GetNoArena();
}
inline void FileOperation::set_dst_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOperation.dst_path)
}
inline void FileOperation::set_dst_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOperation.dst_path)
}
inline void FileOperation::set_dst_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dst_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOperation.dst_path)
}
inline void FileOperation::set_dst_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dst_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOperation.dst_path)
}
inline std::string* FileOperation::mutable_dst_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOperation.dst_path)
  return dst_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOperation::release_dst_path() {
  // @@protoc_insertion_point(field_release:Msg.FileOperation.dst_path)
  if (!has_dst_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOperation::set_allocated_dst_path(std::string* dst_path) {
  if (dst_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_path);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOperation.dst_path)
}

// required string state_hash = 4;
inline bool FileOperation::has_state_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileOperation::clear_state_hash() {
  state_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileOperation::state_hash() const {
  // @@protoc_insertion_point(field_get:Msg.FileOperation.state_hash)
  return state_hash_.GetNoArena();
}
inline void FileOperation::set_state_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  state_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileOperation.state_hash)
}
inline void FileOperation::set_state_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  state_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileOperation.state_hash)
}
inline void FileOperation::set_state_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  state_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileOperation.state_hash)
}
inline void FileOperation::set_state_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  state_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileOperation.state_hash)
}
inline std::string* FileOperation::mutable_state_hash() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.FileOperation.state_hash)
  return state_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileOperation::release_state_hash() {
  // @@protoc_insertion_point(field_release:Msg.FileOperation.state_hash)
  if (!has_state_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return state_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileOperation::set_allocated_state_hash(std::string* state_hash) {
  if (state_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  state_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileOperation.state_hash)
}

// required int64 opTime = 5;
inline bool FileOperation::has_optime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileOperation::clear_optime() {
  optime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileOperation::optime() const {
  // @@protoc_insertion_point(field_get:Msg.FileOperation.opTime)
  return optime_;
}
inline void FileOperation::set_optime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  optime_ = value;
  // @@protoc_insertion_point(field_set:Msg.FileOperation.opTime)
}

// -------------------------------------------------------------------

// GetFileOpsRequest

// required string name = 1;
inline bool GetFileOpsRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileOpsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileOpsRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileOpsRequest.name)
  return name_.GetNoArena();
}
inline void GetFileOpsRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileOpsRequest.name)
}
inline void GetFileOpsRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileOpsRequest.name)
}
inline void GetFileOpsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileOpsRequest.name)
}
inline void GetFileOpsRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileOpsRequest.name)
}
inline std::string* GetFileOpsRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileOpsRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileOpsRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.GetFileOpsRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileOpsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileOpsRequest.name)
}

// required bytes auth = 2;
inline bool GetFileOpsRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFileOpsRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFileOpsRequest::auth() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileOpsRequest.auth)
  return auth_.GetNoArena();
}
inline void GetFileOpsRequest::set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileOpsRequest.auth)
}
inline void GetFileOpsRequest::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileOpsRequest.auth)
}
inline void GetFileOpsRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileOpsRequest.auth)
}
inline void GetFileOpsRequest::set_auth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileOpsRequest.auth)
}
inline std::string* GetFileOpsRequest::mutable_auth() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileOpsRequest.auth)
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileOpsRequest::release_auth() {
  // @@protoc_insertion_point(field_release:Msg.GetFileOpsRequest.auth)
  if (!has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return auth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileOpsRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileOpsRequest.auth)
}

// required string newest_hash = 3;
inline bool GetFileOpsRequest::has_newest_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFileOpsRequest::clear_newest_hash() {
  newest_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetFileOpsRequest::newest_hash() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileOpsRequest.newest_hash)
  return newest_hash_.GetNoArena();
}
inline void GetFileOpsRequest::set_newest_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  newest_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileOpsRequest.newest_hash)
}
inline void GetFileOpsRequest::set_newest_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  newest_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileOpsRequest.newest_hash)
}
inline void GetFileOpsRequest::set_newest_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  newest_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileOpsRequest.newest_hash)
}
inline void GetFileOpsRequest::set_newest_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  newest_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileOpsRequest.newest_hash)
}
inline std::string* GetFileOpsRequest::mutable_newest_hash() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileOpsRequest.newest_hash)
  return newest_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileOpsRequest::release_newest_hash() {
  // @@protoc_insertion_point(field_release:Msg.GetFileOpsRequest.newest_hash)
  if (!has_newest_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return newest_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileOpsRequest::set_allocated_newest_hash(std::string* newest_hash) {
  if (newest_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  newest_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newest_hash);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileOpsRequest.newest_hash)
}

// -------------------------------------------------------------------

// GetFileOpsResponse

// repeated .Msg.FileOperation ops = 2;
inline int GetFileOpsResponse::ops_size() const {
  return ops_.size();
}
inline void GetFileOpsResponse::clear_ops() {
  ops_.Clear();
}
inline ::Msg::FileOperation* GetFileOpsResponse::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:Msg.GetFileOpsResponse.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileOperation >*
GetFileOpsResponse::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:Msg.GetFileOpsResponse.ops)
  return &ops_;
}
inline const ::Msg::FileOperation& GetFileOpsResponse::ops(int index) const {
  // @@protoc_insertion_point(field_get:Msg.GetFileOpsResponse.ops)
  return ops_.Get(index);
}
inline ::Msg::FileOperation* GetFileOpsResponse::add_ops() {
  // @@protoc_insertion_point(field_add:Msg.GetFileOpsResponse.ops)
  return ops_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileOperation >&
GetFileOpsResponse::ops() const {
  // @@protoc_insertion_point(field_list:Msg.GetFileOpsResponse.ops)
  return ops_;
}

// -------------------------------------------------------------------

// NewFileRequest

// required string name = 1;
inline bool NewFileRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewFileRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.NewFileRequest.name)
  return name_.GetNoArena();
}
inline void NewFileRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.NewFileRequest.name)
}
inline void NewFileRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.NewFileRequest.name)
}
inline void NewFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.NewFileRequest.name)
}
inline void NewFileRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.NewFileRequest.name)
}
inline std::string* NewFileRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.NewFileRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.NewFileRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewFileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.NewFileRequest.name)
}

// required .Msg.FileType type = 2;
inline bool NewFileRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewFileRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Msg::FileType NewFileRequest::type() const {
  // @@protoc_insertion_point(field_get:Msg.NewFileRequest.type)
  return static_cast< ::Msg::FileType >(type_);
}
inline void NewFileRequest::set_type(::Msg::FileType value) {
  assert(::Msg::FileType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.NewFileRequest.type)
}

// required int32 total_pack_size = 3;
inline bool NewFileRequest::has_total_pack_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewFileRequest::clear_total_pack_size() {
  total_pack_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewFileRequest::total_pack_size() const {
  // @@protoc_insertion_point(field_get:Msg.NewFileRequest.total_pack_size)
  return total_pack_size_;
}
inline void NewFileRequest::set_total_pack_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_pack_size_ = value;
  // @@protoc_insertion_point(field_set:Msg.NewFileRequest.total_pack_size)
}

// required int32 total_file_size = 4;
inline bool NewFileRequest::has_total_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewFileRequest::clear_total_file_size() {
  total_file_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewFileRequest::total_file_size() const {
  // @@protoc_insertion_point(field_get:Msg.NewFileRequest.total_file_size)
  return total_file_size_;
}
inline void NewFileRequest::set_total_file_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  total_file_size_ = value;
  // @@protoc_insertion_point(field_set:Msg.NewFileRequest.total_file_size)
}

// -------------------------------------------------------------------

// NewFileResponse

// optional int32 post_session_id = 1;
inline bool NewFileResponse::has_post_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewFileResponse::clear_post_session_id() {
  post_session_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewFileResponse::post_session_id() const {
  // @@protoc_insertion_point(field_get:Msg.NewFileResponse.post_session_id)
  return post_session_id_;
}
inline void NewFileResponse::set_post_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  post_session_id_ = value;
  // @@protoc_insertion_point(field_set:Msg.NewFileResponse.post_session_id)
}

// -------------------------------------------------------------------

// GetFileRequest

// required string name = 1;
inline bool GetFileRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileRequest.name)
  return name_.GetNoArena();
}
inline void GetFileRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileRequest.name)
}
inline void GetFileRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileRequest.name)
}
inline void GetFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileRequest.name)
}
inline void GetFileRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileRequest.name)
}
inline std::string* GetFileRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.GetFileRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileRequest.name)
}

// required string path = 2;
inline bool GetFileRequest::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFileRequest::path() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileRequest.path)
  return path_.GetNoArena();
}
inline void GetFileRequest::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileRequest.path)
}
inline void GetFileRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileRequest.path)
}
inline void GetFileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileRequest.path)
}
inline void GetFileRequest::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileRequest.path)
}
inline std::string* GetFileRequest::mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileRequest.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:Msg.GetFileRequest.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileRequest.path)
}

// optional bytes auth = 3;
inline bool GetFileRequest::has_auth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFileRequest::clear_auth() {
  auth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetFileRequest::auth() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileRequest.auth)
  return auth_.GetNoArena();
}
inline void GetFileRequest::set_auth(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileRequest.auth)
}
inline void GetFileRequest::set_auth(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileRequest.auth)
}
inline void GetFileRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileRequest.auth)
}
inline void GetFileRequest::set_auth(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  auth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileRequest.auth)
}
inline std::string* GetFileRequest::mutable_auth() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileRequest.auth)
  return auth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileRequest::release_auth() {
  // @@protoc_insertion_point(field_release:Msg.GetFileRequest.auth)
  if (!has_auth()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return auth_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  auth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileRequest.auth)
}

// -------------------------------------------------------------------

// GetFileResponse

// required string session_key = 2;
inline bool GetFileResponse::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileResponse::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileResponse::session_key() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileResponse.session_key)
  return session_key_.GetNoArena();
}
inline void GetFileResponse::set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileResponse.session_key)
}
inline void GetFileResponse::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileResponse.session_key)
}
inline void GetFileResponse::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileResponse.session_key)
}
inline void GetFileResponse::set_session_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileResponse.session_key)
}
inline std::string* GetFileResponse::mutable_session_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileResponse.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileResponse::release_session_key() {
  // @@protoc_insertion_point(field_release:Msg.GetFileResponse.session_key)
  if (!has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileResponse::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileResponse.session_key)
}

// required int32 total_file_size = 3;
inline bool GetFileResponse::has_total_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFileResponse::clear_total_file_size() {
  total_file_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileResponse::total_file_size() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileResponse.total_file_size)
  return total_file_size_;
}
inline void GetFileResponse::set_total_file_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_file_size_ = value;
  // @@protoc_insertion_point(field_set:Msg.GetFileResponse.total_file_size)
}

// -------------------------------------------------------------------

// GetFileChunkRequest

// required string path = 1;
inline bool GetFileChunkRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileChunkRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileChunkRequest::path() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileChunkRequest.path)
  return path_.GetNoArena();
}
inline void GetFileChunkRequest::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileChunkRequest.path)
}
inline void GetFileChunkRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileChunkRequest.path)
}
inline void GetFileChunkRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileChunkRequest.path)
}
inline void GetFileChunkRequest::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileChunkRequest.path)
}
inline std::string* GetFileChunkRequest::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileChunkRequest.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileChunkRequest::release_path() {
  // @@protoc_insertion_point(field_release:Msg.GetFileChunkRequest.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileChunkRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileChunkRequest.path)
}

// required int32 fileIdx = 2;
inline bool GetFileChunkRequest::has_fileidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFileChunkRequest::clear_fileidx() {
  fileidx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFileChunkRequest::fileidx() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileChunkRequest.fileIdx)
  return fileidx_;
}
inline void GetFileChunkRequest::set_fileidx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  fileidx_ = value;
  // @@protoc_insertion_point(field_set:Msg.GetFileChunkRequest.fileIdx)
}

// required string session_key = 3;
inline bool GetFileChunkRequest::has_session_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFileChunkRequest::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFileChunkRequest::session_key() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileChunkRequest.session_key)
  return session_key_.GetNoArena();
}
inline void GetFileChunkRequest::set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileChunkRequest.session_key)
}
inline void GetFileChunkRequest::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileChunkRequest.session_key)
}
inline void GetFileChunkRequest::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileChunkRequest.session_key)
}
inline void GetFileChunkRequest::set_session_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileChunkRequest.session_key)
}
inline std::string* GetFileChunkRequest::mutable_session_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileChunkRequest.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileChunkRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:Msg.GetFileChunkRequest.session_key)
  if (!has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileChunkRequest::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileChunkRequest.session_key)
}

// -------------------------------------------------------------------

// GetFileChunkResponse

// required bytes data = 1;
inline bool GetFileChunkResponse::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileChunkResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFileChunkResponse::data() const {
  // @@protoc_insertion_point(field_get:Msg.GetFileChunkResponse.data)
  return data_.GetNoArena();
}
inline void GetFileChunkResponse::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.GetFileChunkResponse.data)
}
inline void GetFileChunkResponse::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.GetFileChunkResponse.data)
}
inline void GetFileChunkResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.GetFileChunkResponse.data)
}
inline void GetFileChunkResponse::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.GetFileChunkResponse.data)
}
inline std::string* GetFileChunkResponse::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.GetFileChunkResponse.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileChunkResponse::release_data() {
  // @@protoc_insertion_point(field_release:Msg.GetFileChunkResponse.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileChunkResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Msg.GetFileChunkResponse.data)
}

// -------------------------------------------------------------------

// RmFileRequest

// required string path = 1;
inline bool RmFileRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RmFileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RmFileRequest::path() const {
  // @@protoc_insertion_point(field_get:Msg.RmFileRequest.path)
  return path_.GetNoArena();
}
inline void RmFileRequest::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.RmFileRequest.path)
}
inline void RmFileRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.RmFileRequest.path)
}
inline void RmFileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.RmFileRequest.path)
}
inline void RmFileRequest::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.RmFileRequest.path)
}
inline std::string* RmFileRequest::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.RmFileRequest.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RmFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:Msg.RmFileRequest.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RmFileRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Msg.RmFileRequest.path)
}

// -------------------------------------------------------------------

// FilePost

// required string name = 1;
inline bool FilePost::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilePost::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilePost::name() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.name)
  return name_.GetNoArena();
}
inline void FilePost::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FilePost.name)
}
inline void FilePost::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FilePost.name)
}
inline void FilePost::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FilePost.name)
}
inline void FilePost::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FilePost.name)
}
inline std::string* FilePost::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.FilePost.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FilePost::release_name() {
  // @@protoc_insertion_point(field_release:Msg.FilePost.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FilePost::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.FilePost.name)
}

// required int64 post_session_id = 2;
inline bool FilePost::has_post_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilePost::clear_post_session_id() {
  post_session_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePost::post_session_id() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.post_session_id)
  return post_session_id_;
}
inline void FilePost::set_post_session_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  post_session_id_ = value;
  // @@protoc_insertion_point(field_set:Msg.FilePost.post_session_id)
}

// required int32 pack_idx = 3;
inline bool FilePost::has_pack_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilePost::clear_pack_idx() {
  pack_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePost::pack_idx() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.pack_idx)
  return pack_idx_;
}
inline void FilePost::set_pack_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pack_idx_ = value;
  // @@protoc_insertion_point(field_set:Msg.FilePost.pack_idx)
}

// required int32 file_idx = 4;
inline bool FilePost::has_file_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilePost::clear_file_idx() {
  file_idx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePost::file_idx() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.file_idx)
  return file_idx_;
}
inline void FilePost::set_file_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  file_idx_ = value;
  // @@protoc_insertion_point(field_set:Msg.FilePost.file_idx)
}

// required bytes data = 5;
inline bool FilePost::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilePost::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FilePost::data() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.data)
  return data_.GetNoArena();
}
inline void FilePost::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FilePost.data)
}
inline void FilePost::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FilePost.data)
}
inline void FilePost::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FilePost.data)
}
inline void FilePost::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FilePost.data)
}
inline std::string* FilePost::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.FilePost.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FilePost::release_data() {
  // @@protoc_insertion_point(field_release:Msg.FilePost.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FilePost::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Msg.FilePost.data)
}

// required int32 data_size = 6;
inline bool FilePost::has_data_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FilePost::clear_data_size() {
  data_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePost::data_size() const {
  // @@protoc_insertion_point(field_get:Msg.FilePost.data_size)
  return data_size_;
}
inline void FilePost::set_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  data_size_ = value;
  // @@protoc_insertion_point(field_set:Msg.FilePost.data_size)
}

// -------------------------------------------------------------------

// EndFilePostRequest

// required string name = 1;
inline bool EndFilePostRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndFilePostRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EndFilePostRequest::name() const {
  // @@protoc_insertion_point(field_get:Msg.EndFilePostRequest.name)
  return name_.GetNoArena();
}
inline void EndFilePostRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.EndFilePostRequest.name)
}
inline void EndFilePostRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.EndFilePostRequest.name)
}
inline void EndFilePostRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.EndFilePostRequest.name)
}
inline void EndFilePostRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.EndFilePostRequest.name)
}
inline std::string* EndFilePostRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.EndFilePostRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndFilePostRequest::release_name() {
  // @@protoc_insertion_point(field_release:Msg.EndFilePostRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndFilePostRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.EndFilePostRequest.name)
}

// -------------------------------------------------------------------

// EndFilePostResponse

// required bool ok = 1;
inline bool EndFilePostResponse::has_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndFilePostResponse::clear_ok() {
  ok_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool EndFilePostResponse::ok() const {
  // @@protoc_insertion_point(field_get:Msg.EndFilePostResponse.ok)
  return ok_;
}
inline void EndFilePostResponse::set_ok(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ok_ = value;
  // @@protoc_insertion_point(field_set:Msg.EndFilePostResponse.ok)
}

// optional int32 lost_pack_idx = 2;
inline bool EndFilePostResponse::has_lost_pack_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndFilePostResponse::clear_lost_pack_idx() {
  lost_pack_idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndFilePostResponse::lost_pack_idx() const {
  // @@protoc_insertion_point(field_get:Msg.EndFilePostResponse.lost_pack_idx)
  return lost_pack_idx_;
}
inline void EndFilePostResponse::set_lost_pack_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lost_pack_idx_ = value;
  // @@protoc_insertion_point(field_set:Msg.EndFilePostResponse.lost_pack_idx)
}

// -------------------------------------------------------------------

// LsFileRequest

// required string path = 1;
inline bool LsFileRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LsFileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LsFileRequest::path() const {
  // @@protoc_insertion_point(field_get:Msg.LsFileRequest.path)
  return path_.GetNoArena();
}
inline void LsFileRequest::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.LsFileRequest.path)
}
inline void LsFileRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.LsFileRequest.path)
}
inline void LsFileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.LsFileRequest.path)
}
inline void LsFileRequest::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.LsFileRequest.path)
}
inline std::string* LsFileRequest::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.LsFileRequest.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:Msg.LsFileRequest.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsFileRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Msg.LsFileRequest.path)
}

// -------------------------------------------------------------------

// FileAttribute

// required string name = 1;
inline bool FileAttribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileAttribute::name() const {
  // @@protoc_insertion_point(field_get:Msg.FileAttribute.name)
  return name_.GetNoArena();
}
inline void FileAttribute::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileAttribute.name)
}
inline void FileAttribute::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileAttribute.name)
}
inline void FileAttribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileAttribute.name)
}
inline void FileAttribute::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileAttribute.name)
}
inline std::string* FileAttribute::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.FileAttribute.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileAttribute::release_name() {
  // @@protoc_insertion_point(field_release:Msg.FileAttribute.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileAttribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileAttribute.name)
}

// required .Msg.FileType type = 2;
inline bool FileAttribute::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileAttribute::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Msg::FileType FileAttribute::type() const {
  // @@protoc_insertion_point(field_get:Msg.FileAttribute.type)
  return static_cast< ::Msg::FileType >(type_);
}
inline void FileAttribute::set_type(::Msg::FileType value) {
  assert(::Msg::FileType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.FileAttribute.type)
}

// required int32 size = 3;
inline bool FileAttribute::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileAttribute::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileAttribute::size() const {
  // @@protoc_insertion_point(field_get:Msg.FileAttribute.size)
  return size_;
}
inline void FileAttribute::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
  // @@protoc_insertion_point(field_set:Msg.FileAttribute.size)
}

// required string time = 4;
inline bool FileAttribute::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileAttribute::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileAttribute::time() const {
  // @@protoc_insertion_point(field_get:Msg.FileAttribute.time)
  return time_.GetNoArena();
}
inline void FileAttribute::set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.FileAttribute.time)
}
inline void FileAttribute::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.FileAttribute.time)
}
inline void FileAttribute::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.FileAttribute.time)
}
inline void FileAttribute::set_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.FileAttribute.time)
}
inline std::string* FileAttribute::mutable_time() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.FileAttribute.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileAttribute::release_time() {
  // @@protoc_insertion_point(field_release:Msg.FileAttribute.time)
  if (!has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileAttribute::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Msg.FileAttribute.time)
}

// -------------------------------------------------------------------

// LsFileResponse

// repeated .Msg.FileAttribute files = 1;
inline int LsFileResponse::files_size() const {
  return files_.size();
}
inline void LsFileResponse::clear_files() {
  files_.Clear();
}
inline ::Msg::FileAttribute* LsFileResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:Msg.LsFileResponse.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileAttribute >*
LsFileResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:Msg.LsFileResponse.files)
  return &files_;
}
inline const ::Msg::FileAttribute& LsFileResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:Msg.LsFileResponse.files)
  return files_.Get(index);
}
inline ::Msg::FileAttribute* LsFileResponse::add_files() {
  // @@protoc_insertion_point(field_add:Msg.LsFileResponse.files)
  return files_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Msg::FileAttribute >&
LsFileResponse::files() const {
  // @@protoc_insertion_point(field_list:Msg.LsFileResponse.files)
  return files_;
}

// -------------------------------------------------------------------

// MvFileRequest

// required string srcPath = 1;
inline bool MvFileRequest::has_srcpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MvFileRequest::clear_srcpath() {
  srcpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MvFileRequest::srcpath() const {
  // @@protoc_insertion_point(field_get:Msg.MvFileRequest.srcPath)
  return srcpath_.GetNoArena();
}
inline void MvFileRequest::set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.MvFileRequest.srcPath)
}
inline void MvFileRequest::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.MvFileRequest.srcPath)
}
inline void MvFileRequest::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.MvFileRequest.srcPath)
}
inline void MvFileRequest::set_srcpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.MvFileRequest.srcPath)
}
inline std::string* MvFileRequest::mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.MvFileRequest.srcPath)
  return srcpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MvFileRequest::release_srcpath() {
  // @@protoc_insertion_point(field_release:Msg.MvFileRequest.srcPath)
  if (!has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MvFileRequest::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath);
  // @@protoc_insertion_point(field_set_allocated:Msg.MvFileRequest.srcPath)
}

// required string dstPath = 2;
inline bool MvFileRequest::has_dstpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MvFileRequest::clear_dstpath() {
  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MvFileRequest::dstpath() const {
  // @@protoc_insertion_point(field_get:Msg.MvFileRequest.dstPath)
  return dstpath_.GetNoArena();
}
inline void MvFileRequest::set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.MvFileRequest.dstPath)
}
inline void MvFileRequest::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.MvFileRequest.dstPath)
}
inline void MvFileRequest::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.MvFileRequest.dstPath)
}
inline void MvFileRequest::set_dstpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.MvFileRequest.dstPath)
}
inline std::string* MvFileRequest::mutable_dstpath() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.MvFileRequest.dstPath)
  return dstpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MvFileRequest::release_dstpath() {
  // @@protoc_insertion_point(field_release:Msg.MvFileRequest.dstPath)
  if (!has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dstpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MvFileRequest::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath);
  // @@protoc_insertion_point(field_set_allocated:Msg.MvFileRequest.dstPath)
}

// -------------------------------------------------------------------

// CpFileRequest

// required string srcPath = 1;
inline bool CpFileRequest::has_srcpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpFileRequest::clear_srcpath() {
  srcpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpFileRequest::srcpath() const {
  // @@protoc_insertion_point(field_get:Msg.CpFileRequest.srcPath)
  return srcpath_.GetNoArena();
}
inline void CpFileRequest::set_srcpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.CpFileRequest.srcPath)
}
inline void CpFileRequest::set_srcpath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.CpFileRequest.srcPath)
}
inline void CpFileRequest::set_srcpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.CpFileRequest.srcPath)
}
inline void CpFileRequest::set_srcpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  srcpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.CpFileRequest.srcPath)
}
inline std::string* CpFileRequest::mutable_srcpath() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.CpFileRequest.srcPath)
  return srcpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpFileRequest::release_srcpath() {
  // @@protoc_insertion_point(field_release:Msg.CpFileRequest.srcPath)
  if (!has_srcpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return srcpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpFileRequest::set_allocated_srcpath(std::string* srcpath) {
  if (srcpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  srcpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcpath);
  // @@protoc_insertion_point(field_set_allocated:Msg.CpFileRequest.srcPath)
}

// required string dstPath = 2;
inline bool CpFileRequest::has_dstpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpFileRequest::clear_dstpath() {
  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CpFileRequest::dstpath() const {
  // @@protoc_insertion_point(field_get:Msg.CpFileRequest.dstPath)
  return dstpath_.GetNoArena();
}
inline void CpFileRequest::set_dstpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.CpFileRequest.dstPath)
}
inline void CpFileRequest::set_dstpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.CpFileRequest.dstPath)
}
inline void CpFileRequest::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.CpFileRequest.dstPath)
}
inline void CpFileRequest::set_dstpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.CpFileRequest.dstPath)
}
inline std::string* CpFileRequest::mutable_dstpath() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Msg.CpFileRequest.dstPath)
  return dstpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpFileRequest::release_dstpath() {
  // @@protoc_insertion_point(field_release:Msg.CpFileRequest.dstPath)
  if (!has_dstpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dstpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpFileRequest::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dstpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath);
  // @@protoc_insertion_point(field_set_allocated:Msg.CpFileRequest.dstPath)
}

// -------------------------------------------------------------------

// Request

// optional .Msg.JoinRequest join = 1;
inline bool Request::has_join() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_join() {
  if (join_ != nullptr) join_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Msg::JoinRequest& Request::join() const {
  const ::Msg::JoinRequest* p = join_;
  // @@protoc_insertion_point(field_get:Msg.Request.join)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::JoinRequest*>(
      &::Msg::_JoinRequest_default_instance_);
}
inline ::Msg::JoinRequest* Request::release_join() {
  // @@protoc_insertion_point(field_release:Msg.Request.join)
  _has_bits_[0] &= ~0x00000001u;
  ::Msg::JoinRequest* temp = join_;
  join_ = nullptr;
  return temp;
}
inline ::Msg::JoinRequest* Request::mutable_join() {
  _has_bits_[0] |= 0x00000001u;
  if (join_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::JoinRequest>(GetArenaNoVirtual());
    join_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.join)
  return join_;
}
inline void Request::set_allocated_join(::Msg::JoinRequest* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete join_;
  }
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  join_ = join;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.join)
}

// optional .Msg.UpdateStatusRequest update_status = 2;
inline bool Request::has_update_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_update_status() {
  if (update_status_ != nullptr) update_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::UpdateStatusRequest& Request::update_status() const {
  const ::Msg::UpdateStatusRequest* p = update_status_;
  // @@protoc_insertion_point(field_get:Msg.Request.update_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::UpdateStatusRequest*>(
      &::Msg::_UpdateStatusRequest_default_instance_);
}
inline ::Msg::UpdateStatusRequest* Request::release_update_status() {
  // @@protoc_insertion_point(field_release:Msg.Request.update_status)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::UpdateStatusRequest* temp = update_status_;
  update_status_ = nullptr;
  return temp;
}
inline ::Msg::UpdateStatusRequest* Request::mutable_update_status() {
  _has_bits_[0] |= 0x00000002u;
  if (update_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::UpdateStatusRequest>(GetArenaNoVirtual());
    update_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.update_status)
  return update_status_;
}
inline void Request::set_allocated_update_status(::Msg::UpdateStatusRequest* update_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_status_;
  }
  if (update_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_status_ = update_status;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.update_status)
}

// optional .Msg.GetStateRequest get_state_req = 3;
inline bool Request::has_get_state_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::clear_get_state_req() {
  if (get_state_req_ != nullptr) get_state_req_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Msg::GetStateRequest& Request::get_state_req() const {
  const ::Msg::GetStateRequest* p = get_state_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.get_state_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetStateRequest*>(
      &::Msg::_GetStateRequest_default_instance_);
}
inline ::Msg::GetStateRequest* Request::release_get_state_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.get_state_req)
  _has_bits_[0] &= ~0x00000004u;
  ::Msg::GetStateRequest* temp = get_state_req_;
  get_state_req_ = nullptr;
  return temp;
}
inline ::Msg::GetStateRequest* Request::mutable_get_state_req() {
  _has_bits_[0] |= 0x00000004u;
  if (get_state_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetStateRequest>(GetArenaNoVirtual());
    get_state_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.get_state_req)
  return get_state_req_;
}
inline void Request::set_allocated_get_state_req(::Msg::GetStateRequest* get_state_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_state_req_;
  }
  if (get_state_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_state_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_state_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  get_state_req_ = get_state_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.get_state_req)
}

// optional .Msg.UpdateStateHashRequest state = 4;
inline bool Request::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Msg::UpdateStateHashRequest& Request::state() const {
  const ::Msg::UpdateStateHashRequest* p = state_;
  // @@protoc_insertion_point(field_get:Msg.Request.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::UpdateStateHashRequest*>(
      &::Msg::_UpdateStateHashRequest_default_instance_);
}
inline ::Msg::UpdateStateHashRequest* Request::release_state() {
  // @@protoc_insertion_point(field_release:Msg.Request.state)
  _has_bits_[0] &= ~0x00000008u;
  ::Msg::UpdateStateHashRequest* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::Msg::UpdateStateHashRequest* Request::mutable_state() {
  _has_bits_[0] |= 0x00000008u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::UpdateStateHashRequest>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.state)
  return state_;
}
inline void Request::set_allocated_state(::Msg::UpdateStateHashRequest* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.state)
}

// optional .Msg.NewFileRequest file = 5;
inline bool Request::has_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::clear_file() {
  if (file_ != nullptr) file_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Msg::NewFileRequest& Request::file() const {
  const ::Msg::NewFileRequest* p = file_;
  // @@protoc_insertion_point(field_get:Msg.Request.file)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::NewFileRequest*>(
      &::Msg::_NewFileRequest_default_instance_);
}
inline ::Msg::NewFileRequest* Request::release_file() {
  // @@protoc_insertion_point(field_release:Msg.Request.file)
  _has_bits_[0] &= ~0x00000010u;
  ::Msg::NewFileRequest* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::Msg::NewFileRequest* Request::mutable_file() {
  _has_bits_[0] |= 0x00000010u;
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::NewFileRequest>(GetArenaNoVirtual());
    file_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.file)
  return file_;
}
inline void Request::set_allocated_file(::Msg::NewFileRequest* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.file)
}

// optional .Msg.RmFileRequest rm_op = 6;
inline bool Request::has_rm_op() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::clear_rm_op() {
  if (rm_op_ != nullptr) rm_op_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Msg::RmFileRequest& Request::rm_op() const {
  const ::Msg::RmFileRequest* p = rm_op_;
  // @@protoc_insertion_point(field_get:Msg.Request.rm_op)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::RmFileRequest*>(
      &::Msg::_RmFileRequest_default_instance_);
}
inline ::Msg::RmFileRequest* Request::release_rm_op() {
  // @@protoc_insertion_point(field_release:Msg.Request.rm_op)
  _has_bits_[0] &= ~0x00000020u;
  ::Msg::RmFileRequest* temp = rm_op_;
  rm_op_ = nullptr;
  return temp;
}
inline ::Msg::RmFileRequest* Request::mutable_rm_op() {
  _has_bits_[0] |= 0x00000020u;
  if (rm_op_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::RmFileRequest>(GetArenaNoVirtual());
    rm_op_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.rm_op)
  return rm_op_;
}
inline void Request::set_allocated_rm_op(::Msg::RmFileRequest* rm_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rm_op_;
  }
  if (rm_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rm_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rm_op, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  rm_op_ = rm_op;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.rm_op)
}

// optional .Msg.LsFileRequest ls_file_req = 7;
inline bool Request::has_ls_file_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::clear_ls_file_req() {
  if (ls_file_req_ != nullptr) ls_file_req_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Msg::LsFileRequest& Request::ls_file_req() const {
  const ::Msg::LsFileRequest* p = ls_file_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.ls_file_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::LsFileRequest*>(
      &::Msg::_LsFileRequest_default_instance_);
}
inline ::Msg::LsFileRequest* Request::release_ls_file_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.ls_file_req)
  _has_bits_[0] &= ~0x00000040u;
  ::Msg::LsFileRequest* temp = ls_file_req_;
  ls_file_req_ = nullptr;
  return temp;
}
inline ::Msg::LsFileRequest* Request::mutable_ls_file_req() {
  _has_bits_[0] |= 0x00000040u;
  if (ls_file_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::LsFileRequest>(GetArenaNoVirtual());
    ls_file_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.ls_file_req)
  return ls_file_req_;
}
inline void Request::set_allocated_ls_file_req(::Msg::LsFileRequest* ls_file_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ls_file_req_;
  }
  if (ls_file_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ls_file_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ls_file_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  ls_file_req_ = ls_file_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.ls_file_req)
}

// optional .Msg.MvFileRequest mv_file_req = 8;
inline bool Request::has_mv_file_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::clear_mv_file_req() {
  if (mv_file_req_ != nullptr) mv_file_req_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Msg::MvFileRequest& Request::mv_file_req() const {
  const ::Msg::MvFileRequest* p = mv_file_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.mv_file_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::MvFileRequest*>(
      &::Msg::_MvFileRequest_default_instance_);
}
inline ::Msg::MvFileRequest* Request::release_mv_file_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.mv_file_req)
  _has_bits_[0] &= ~0x00000080u;
  ::Msg::MvFileRequest* temp = mv_file_req_;
  mv_file_req_ = nullptr;
  return temp;
}
inline ::Msg::MvFileRequest* Request::mutable_mv_file_req() {
  _has_bits_[0] |= 0x00000080u;
  if (mv_file_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::MvFileRequest>(GetArenaNoVirtual());
    mv_file_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.mv_file_req)
  return mv_file_req_;
}
inline void Request::set_allocated_mv_file_req(::Msg::MvFileRequest* mv_file_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mv_file_req_;
  }
  if (mv_file_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mv_file_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mv_file_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  mv_file_req_ = mv_file_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.mv_file_req)
}

// optional .Msg.CpFileRequest cp_file_req = 9;
inline bool Request::has_cp_file_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::clear_cp_file_req() {
  if (cp_file_req_ != nullptr) cp_file_req_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::Msg::CpFileRequest& Request::cp_file_req() const {
  const ::Msg::CpFileRequest* p = cp_file_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.cp_file_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::CpFileRequest*>(
      &::Msg::_CpFileRequest_default_instance_);
}
inline ::Msg::CpFileRequest* Request::release_cp_file_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.cp_file_req)
  _has_bits_[0] &= ~0x00000100u;
  ::Msg::CpFileRequest* temp = cp_file_req_;
  cp_file_req_ = nullptr;
  return temp;
}
inline ::Msg::CpFileRequest* Request::mutable_cp_file_req() {
  _has_bits_[0] |= 0x00000100u;
  if (cp_file_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::CpFileRequest>(GetArenaNoVirtual());
    cp_file_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.cp_file_req)
  return cp_file_req_;
}
inline void Request::set_allocated_cp_file_req(::Msg::CpFileRequest* cp_file_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cp_file_req_;
  }
  if (cp_file_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cp_file_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_file_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cp_file_req_ = cp_file_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.cp_file_req)
}

// optional .Msg.GetFileOpsRequest get_file_ops_req = 10;
inline bool Request::has_get_file_ops_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::clear_get_file_ops_req() {
  if (get_file_ops_req_ != nullptr) get_file_ops_req_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::Msg::GetFileOpsRequest& Request::get_file_ops_req() const {
  const ::Msg::GetFileOpsRequest* p = get_file_ops_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.get_file_ops_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileOpsRequest*>(
      &::Msg::_GetFileOpsRequest_default_instance_);
}
inline ::Msg::GetFileOpsRequest* Request::release_get_file_ops_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.get_file_ops_req)
  _has_bits_[0] &= ~0x00000200u;
  ::Msg::GetFileOpsRequest* temp = get_file_ops_req_;
  get_file_ops_req_ = nullptr;
  return temp;
}
inline ::Msg::GetFileOpsRequest* Request::mutable_get_file_ops_req() {
  _has_bits_[0] |= 0x00000200u;
  if (get_file_ops_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileOpsRequest>(GetArenaNoVirtual());
    get_file_ops_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.get_file_ops_req)
  return get_file_ops_req_;
}
inline void Request::set_allocated_get_file_ops_req(::Msg::GetFileOpsRequest* get_file_ops_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_ops_req_;
  }
  if (get_file_ops_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_ops_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_ops_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  get_file_ops_req_ = get_file_ops_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.get_file_ops_req)
}

// optional .Msg.GetFileRequest get_file_req = 11;
inline bool Request::has_get_file_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::clear_get_file_req() {
  if (get_file_req_ != nullptr) get_file_req_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::Msg::GetFileRequest& Request::get_file_req() const {
  const ::Msg::GetFileRequest* p = get_file_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.get_file_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileRequest*>(
      &::Msg::_GetFileRequest_default_instance_);
}
inline ::Msg::GetFileRequest* Request::release_get_file_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.get_file_req)
  _has_bits_[0] &= ~0x00000400u;
  ::Msg::GetFileRequest* temp = get_file_req_;
  get_file_req_ = nullptr;
  return temp;
}
inline ::Msg::GetFileRequest* Request::mutable_get_file_req() {
  _has_bits_[0] |= 0x00000400u;
  if (get_file_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileRequest>(GetArenaNoVirtual());
    get_file_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.get_file_req)
  return get_file_req_;
}
inline void Request::set_allocated_get_file_req(::Msg::GetFileRequest* get_file_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_req_;
  }
  if (get_file_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  get_file_req_ = get_file_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.get_file_req)
}

// optional .Msg.GetFileChunkRequest get_file_chunk_req = 12;
inline bool Request::has_get_file_chunk_req() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::clear_get_file_chunk_req() {
  if (get_file_chunk_req_ != nullptr) get_file_chunk_req_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::Msg::GetFileChunkRequest& Request::get_file_chunk_req() const {
  const ::Msg::GetFileChunkRequest* p = get_file_chunk_req_;
  // @@protoc_insertion_point(field_get:Msg.Request.get_file_chunk_req)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileChunkRequest*>(
      &::Msg::_GetFileChunkRequest_default_instance_);
}
inline ::Msg::GetFileChunkRequest* Request::release_get_file_chunk_req() {
  // @@protoc_insertion_point(field_release:Msg.Request.get_file_chunk_req)
  _has_bits_[0] &= ~0x00000800u;
  ::Msg::GetFileChunkRequest* temp = get_file_chunk_req_;
  get_file_chunk_req_ = nullptr;
  return temp;
}
inline ::Msg::GetFileChunkRequest* Request::mutable_get_file_chunk_req() {
  _has_bits_[0] |= 0x00000800u;
  if (get_file_chunk_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileChunkRequest>(GetArenaNoVirtual());
    get_file_chunk_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Request.get_file_chunk_req)
  return get_file_chunk_req_;
}
inline void Request::set_allocated_get_file_chunk_req(::Msg::GetFileChunkRequest* get_file_chunk_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_chunk_req_;
  }
  if (get_file_chunk_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_chunk_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_chunk_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  get_file_chunk_req_ = get_file_chunk_req;
  // @@protoc_insertion_point(field_set_allocated:Msg.Request.get_file_chunk_req)
}

// -------------------------------------------------------------------

// Response

// required .Msg.MsgResStatus status = 1;
inline bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Response::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::Msg::MsgResStatus Response::status() const {
  // @@protoc_insertion_point(field_get:Msg.Response.status)
  return static_cast< ::Msg::MsgResStatus >(status_);
}
inline void Response::set_status(::Msg::MsgResStatus value) {
  assert(::Msg::MsgResStatus_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Msg.Response.status)
}

// optional string info = 2;
inline bool Response::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::info() const {
  // @@protoc_insertion_point(field_get:Msg.Response.info)
  return info_.GetNoArena();
}
inline void Response::set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.Response.info)
}
inline void Response::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.Response.info)
}
inline void Response::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.Response.info)
}
inline void Response::set_info(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.Response.info)
}
inline std::string* Response::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Msg.Response.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_info() {
  // @@protoc_insertion_point(field_release:Msg.Response.info)
  if (!has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.info)
}

// optional .Msg.GetStateResponse get_state_res = 3;
inline bool Response::has_get_state_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::clear_get_state_res() {
  if (get_state_res_ != nullptr) get_state_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::GetStateResponse& Response::get_state_res() const {
  const ::Msg::GetStateResponse* p = get_state_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.get_state_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetStateResponse*>(
      &::Msg::_GetStateResponse_default_instance_);
}
inline ::Msg::GetStateResponse* Response::release_get_state_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.get_state_res)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::GetStateResponse* temp = get_state_res_;
  get_state_res_ = nullptr;
  return temp;
}
inline ::Msg::GetStateResponse* Response::mutable_get_state_res() {
  _has_bits_[0] |= 0x00000002u;
  if (get_state_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetStateResponse>(GetArenaNoVirtual());
    get_state_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.get_state_res)
  return get_state_res_;
}
inline void Response::set_allocated_get_state_res(::Msg::GetStateResponse* get_state_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_state_res_;
  }
  if (get_state_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_state_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_state_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  get_state_res_ = get_state_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.get_state_res)
}

// optional .Msg.NewFileResponse new_file_response = 4;
inline bool Response::has_new_file_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::clear_new_file_response() {
  if (new_file_response_ != nullptr) new_file_response_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Msg::NewFileResponse& Response::new_file_response() const {
  const ::Msg::NewFileResponse* p = new_file_response_;
  // @@protoc_insertion_point(field_get:Msg.Response.new_file_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::NewFileResponse*>(
      &::Msg::_NewFileResponse_default_instance_);
}
inline ::Msg::NewFileResponse* Response::release_new_file_response() {
  // @@protoc_insertion_point(field_release:Msg.Response.new_file_response)
  _has_bits_[0] &= ~0x00000004u;
  ::Msg::NewFileResponse* temp = new_file_response_;
  new_file_response_ = nullptr;
  return temp;
}
inline ::Msg::NewFileResponse* Response::mutable_new_file_response() {
  _has_bits_[0] |= 0x00000004u;
  if (new_file_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::NewFileResponse>(GetArenaNoVirtual());
    new_file_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.new_file_response)
  return new_file_response_;
}
inline void Response::set_allocated_new_file_response(::Msg::NewFileResponse* new_file_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete new_file_response_;
  }
  if (new_file_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_file_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_file_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_file_response_ = new_file_response;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.new_file_response)
}

// optional .Msg.LsFileResponse ls_file_res = 5;
inline bool Response::has_ls_file_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::clear_ls_file_res() {
  if (ls_file_res_ != nullptr) ls_file_res_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Msg::LsFileResponse& Response::ls_file_res() const {
  const ::Msg::LsFileResponse* p = ls_file_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.ls_file_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::LsFileResponse*>(
      &::Msg::_LsFileResponse_default_instance_);
}
inline ::Msg::LsFileResponse* Response::release_ls_file_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.ls_file_res)
  _has_bits_[0] &= ~0x00000008u;
  ::Msg::LsFileResponse* temp = ls_file_res_;
  ls_file_res_ = nullptr;
  return temp;
}
inline ::Msg::LsFileResponse* Response::mutable_ls_file_res() {
  _has_bits_[0] |= 0x00000008u;
  if (ls_file_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::LsFileResponse>(GetArenaNoVirtual());
    ls_file_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.ls_file_res)
  return ls_file_res_;
}
inline void Response::set_allocated_ls_file_res(::Msg::LsFileResponse* ls_file_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ls_file_res_;
  }
  if (ls_file_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ls_file_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ls_file_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ls_file_res_ = ls_file_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.ls_file_res)
}

// optional .Msg.JoinResponse join_res = 6;
inline bool Response::has_join_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::clear_join_res() {
  if (join_res_ != nullptr) join_res_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Msg::JoinResponse& Response::join_res() const {
  const ::Msg::JoinResponse* p = join_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.join_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::JoinResponse*>(
      &::Msg::_JoinResponse_default_instance_);
}
inline ::Msg::JoinResponse* Response::release_join_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.join_res)
  _has_bits_[0] &= ~0x00000010u;
  ::Msg::JoinResponse* temp = join_res_;
  join_res_ = nullptr;
  return temp;
}
inline ::Msg::JoinResponse* Response::mutable_join_res() {
  _has_bits_[0] |= 0x00000010u;
  if (join_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::JoinResponse>(GetArenaNoVirtual());
    join_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.join_res)
  return join_res_;
}
inline void Response::set_allocated_join_res(::Msg::JoinResponse* join_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete join_res_;
  }
  if (join_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      join_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  join_res_ = join_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.join_res)
}

// optional .Msg.GetFileOpsResponse get_file_ops_res = 7;
inline bool Response::has_get_file_ops_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::clear_get_file_ops_res() {
  if (get_file_ops_res_ != nullptr) get_file_ops_res_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Msg::GetFileOpsResponse& Response::get_file_ops_res() const {
  const ::Msg::GetFileOpsResponse* p = get_file_ops_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.get_file_ops_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileOpsResponse*>(
      &::Msg::_GetFileOpsResponse_default_instance_);
}
inline ::Msg::GetFileOpsResponse* Response::release_get_file_ops_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.get_file_ops_res)
  _has_bits_[0] &= ~0x00000020u;
  ::Msg::GetFileOpsResponse* temp = get_file_ops_res_;
  get_file_ops_res_ = nullptr;
  return temp;
}
inline ::Msg::GetFileOpsResponse* Response::mutable_get_file_ops_res() {
  _has_bits_[0] |= 0x00000020u;
  if (get_file_ops_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileOpsResponse>(GetArenaNoVirtual());
    get_file_ops_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.get_file_ops_res)
  return get_file_ops_res_;
}
inline void Response::set_allocated_get_file_ops_res(::Msg::GetFileOpsResponse* get_file_ops_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_ops_res_;
  }
  if (get_file_ops_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_ops_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_ops_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  get_file_ops_res_ = get_file_ops_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.get_file_ops_res)
}

// optional .Msg.GetFileResponse get_file_res = 8;
inline bool Response::has_get_file_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response::clear_get_file_res() {
  if (get_file_res_ != nullptr) get_file_res_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Msg::GetFileResponse& Response::get_file_res() const {
  const ::Msg::GetFileResponse* p = get_file_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.get_file_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileResponse*>(
      &::Msg::_GetFileResponse_default_instance_);
}
inline ::Msg::GetFileResponse* Response::release_get_file_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.get_file_res)
  _has_bits_[0] &= ~0x00000040u;
  ::Msg::GetFileResponse* temp = get_file_res_;
  get_file_res_ = nullptr;
  return temp;
}
inline ::Msg::GetFileResponse* Response::mutable_get_file_res() {
  _has_bits_[0] |= 0x00000040u;
  if (get_file_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileResponse>(GetArenaNoVirtual());
    get_file_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.get_file_res)
  return get_file_res_;
}
inline void Response::set_allocated_get_file_res(::Msg::GetFileResponse* get_file_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_res_;
  }
  if (get_file_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  get_file_res_ = get_file_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.get_file_res)
}

// optional .Msg.GetFileChunkResponse get_file_chunk_res = 9;
inline bool Response::has_get_file_chunk_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Response::clear_get_file_chunk_res() {
  if (get_file_chunk_res_ != nullptr) get_file_chunk_res_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::Msg::GetFileChunkResponse& Response::get_file_chunk_res() const {
  const ::Msg::GetFileChunkResponse* p = get_file_chunk_res_;
  // @@protoc_insertion_point(field_get:Msg.Response.get_file_chunk_res)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::GetFileChunkResponse*>(
      &::Msg::_GetFileChunkResponse_default_instance_);
}
inline ::Msg::GetFileChunkResponse* Response::release_get_file_chunk_res() {
  // @@protoc_insertion_point(field_release:Msg.Response.get_file_chunk_res)
  _has_bits_[0] &= ~0x00000080u;
  ::Msg::GetFileChunkResponse* temp = get_file_chunk_res_;
  get_file_chunk_res_ = nullptr;
  return temp;
}
inline ::Msg::GetFileChunkResponse* Response::mutable_get_file_chunk_res() {
  _has_bits_[0] |= 0x00000080u;
  if (get_file_chunk_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::GetFileChunkResponse>(GetArenaNoVirtual());
    get_file_chunk_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Response.get_file_chunk_res)
  return get_file_chunk_res_;
}
inline void Response::set_allocated_get_file_chunk_res(::Msg::GetFileChunkResponse* get_file_chunk_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_file_chunk_res_;
  }
  if (get_file_chunk_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_file_chunk_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_file_chunk_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  get_file_chunk_res_ = get_file_chunk_res;
  // @@protoc_insertion_point(field_set_allocated:Msg.Response.get_file_chunk_res)
}

// -------------------------------------------------------------------

// Message

// required .Msg.MsgType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Msg::MsgType Message::type() const {
  // @@protoc_insertion_point(field_get:Msg.Message.type)
  return static_cast< ::Msg::MsgType >(type_);
}
inline void Message::set_type(::Msg::MsgType value) {
  assert(::Msg::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.Message.type)
}

// optional .Msg.Request request = 2;
inline bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Msg::Request& Message::request() const {
  const ::Msg::Request* p = request_;
  // @@protoc_insertion_point(field_get:Msg.Message.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::Request*>(
      &::Msg::_Request_default_instance_);
}
inline ::Msg::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:Msg.Message.request)
  _has_bits_[0] &= ~0x00000001u;
  ::Msg::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::Msg::Request* Message::mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::Request>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Message.request)
  return request_;
}
inline void Message::set_allocated_request(::Msg::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:Msg.Message.request)
}

// optional .Msg.Response response = 3;
inline bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::clear_response() {
  if (response_ != nullptr) response_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Msg::Response& Message::response() const {
  const ::Msg::Response* p = response_;
  // @@protoc_insertion_point(field_get:Msg.Message.response)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::Response*>(
      &::Msg::_Response_default_instance_);
}
inline ::Msg::Response* Message::release_response() {
  // @@protoc_insertion_point(field_release:Msg.Message.response)
  _has_bits_[0] &= ~0x00000002u;
  ::Msg::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::Msg::Response* Message::mutable_response() {
  _has_bits_[0] |= 0x00000002u;
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Message.response)
  return response_;
}
inline void Message::set_allocated_response(::Msg::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Msg.Message.response)
}

// optional .Msg.FilePost file_post = 4;
inline bool Message::has_file_post() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::clear_file_post() {
  if (file_post_ != nullptr) file_post_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Msg::FilePost& Message::file_post() const {
  const ::Msg::FilePost* p = file_post_;
  // @@protoc_insertion_point(field_get:Msg.Message.file_post)
  return p != nullptr ? *p : *reinterpret_cast<const ::Msg::FilePost*>(
      &::Msg::_FilePost_default_instance_);
}
inline ::Msg::FilePost* Message::release_file_post() {
  // @@protoc_insertion_point(field_release:Msg.Message.file_post)
  _has_bits_[0] &= ~0x00000004u;
  ::Msg::FilePost* temp = file_post_;
  file_post_ = nullptr;
  return temp;
}
inline ::Msg::FilePost* Message::mutable_file_post() {
  _has_bits_[0] |= 0x00000004u;
  if (file_post_ == nullptr) {
    auto* p = CreateMaybeMessage<::Msg::FilePost>(GetArenaNoVirtual());
    file_post_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Msg.Message.file_post)
  return file_post_;
}
inline void Message::set_allocated_file_post(::Msg::FilePost* file_post) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_post_;
  }
  if (file_post) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_post = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_post, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_post_ = file_post;
  // @@protoc_insertion_point(field_set_allocated:Msg.Message.file_post)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Msg::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::MsgType>() {
  return ::Msg::MsgType_descriptor();
}
template <> struct is_proto_enum< ::Msg::FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::FileType>() {
  return ::Msg::FileType_descriptor();
}
template <> struct is_proto_enum< ::Msg::FileOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::FileOpType>() {
  return ::Msg::FileOpType_descriptor();
}
template <> struct is_proto_enum< ::Msg::MsgResStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Msg::MsgResStatus>() {
  return ::Msg::MsgResStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
